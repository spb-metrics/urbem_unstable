<?xml version="1.0" encoding="UTF-8"?>
<report xmlns="http://www.eclipse.org/birt/2005/design" version="3.2.23" id="1">
    <property name="createdBy">Eclipse BIRT Designer Version 4.4.0.v201405191524 Build &lt;4.4.0.v20140606-1451></property>
    <property name="units">in</property>
    <text-property name="displayName">Template Urbem Paisagem Entidade</text-property>
    <property name="layoutPreference">auto layout</property>
    <list-property name="libraries">
        <structure>
            <property name="fileName">../../../../../../gestaoAdministrativa/fontes/RPT/framework/library/urbem.rptlibrary</property>
            <property name="namespace">urbem</property>
        </structure>
    </list-property>
    <parameters>
        <scalar-parameter name="term_user" id="6666">
            <property name="valueType">static</property>
            <property name="dataType">string</property>
            <property name="distinct">true</property>
            <property name="paramType">simple</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="exercicio" id="483">
            <property name="hidden">true</property>
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="cod_acao" id="484">
            <property name="hidden">true</property>
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="db_conn_url" id="486">
            <property name="hidden">true</property>
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="entidade" id="492">
            <property name="hidden">true</property>
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="stObs" id="1180">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="stFaixas" id="1186">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="stValores" id="1187">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="stVigencia" id="1188">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="boServidor" id="1190">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="boPensionista" id="1191">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="boAtributo" id="1192">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="competencia" id="1193">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="query" id="1194">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="stTipoFiltro" id="1203">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="codigos" id="1204">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="codigos2" id="1205">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="inCodAtributo" id="1206">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="valores" id="1207">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="filtro" id="1208">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="inCodPadrao" id="1209">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="distinct">true</property>
            <property name="paramType">simple</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="inCodConfiguracao" id="1210">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="inCodEvento" id="1211">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="inCodComplementar" id="1212">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="inCodPeriodoMovimentacao" id="1213">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="stEntidade" id="1214">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="stCodContratosExcluidos" id="1215">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="boAposentado" id="1216">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="stPercentual" id="1217">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="distinct">true</property>
            <property name="paramType">simple</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="inCodReajuste" id="1219">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">integer</property>
            <property name="distinct">true</property>
            <property name="paramType">simple</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
        <scalar-parameter name="fixado" id="1242">
            <property name="valueType">static</property>
            <property name="isRequired">false</property>
            <property name="dataType">string</property>
            <property name="distinct">true</property>
            <property name="paramType">simple</property>
            <property name="controlType">text-box</property>
            <structure name="format">
                <property name="category">Unformatted</property>
            </structure>
        </scalar-parameter>
    </parameters>
    <data-sources>
        <oda-data-source extensionID="org.eclipse.birt.report.data.oda.jdbc" name="Data Source" id="481" extends="urbem.postgres">
        </oda-data-source>
    </data-sources>
    <data-sets>
        <oda-data-set extensionID="org.eclipse.birt.report.data.oda.jdbc.JdbcSelectDataSet" name="principal" id="1189">
            <structure name="cachedMetaData"/>
            <method name="beforeOpen"><![CDATA[if (params["stValores"]=="Padroes") {
	if(params["boPensionista"] == true){
	    this.queryText = "     SELECT contrato.*                                                                                                                                                                             \n";
	    this.queryText += "          , nom_cgm                                                                                                                                                                               \n";               
	    this.queryText += "          , to_real(contrato_pensionista_padrao.valor) AS valor                                                                                                                                   \n";
	    this.queryText += "	         , NULL as orgao                                                                                                                                                                         \n";
	    this.queryText += "       FROM folhapagamento.reajuste_padrao_padrao                                                                                                                                                 \n";
	    this.queryText += " INNER JOIN folhapagamento.reajuste                                                                                                                                                               \n";
	    this.queryText += "         ON reajuste_padrao_padrao.cod_reajuste = reajuste.cod_reajuste                                                                                                                           \n";
	    this.queryText += " INNER JOIN (SELECT contrato_servidor_padrao.*                                                                                                                                                    \n";                  
	    this.queryText += "                  , valor                                                                                                                                                                         \n";                  
	    this.queryText += "               FROM pessoal.contrato_servidor_padrao                                                                                                                                              \n";                 
	    this.queryText += "                  , ( SELECT cod_contrato                                                                                                                                                         \n";                 
	    this.queryText += "                           , max(timestamp) as timestamp                                                                                                                                          \n";                 
	    this.queryText += "                        FROM pessoal.contrato_servidor_padrao                                                                                                                                     \n";                
	    this.queryText += "                    GROUP BY cod_contrato) as max_contrato_servidor_padrao                                                                                                                        \n";                 
	    this.queryText += "                 , folhapagamento.padrao_padrao                                                                                                                                                   \n";                
	    this.queryText += "                 , (  SELECT cod_padrao                                                                                                                                                           \n";                 
	    this.queryText += "                           , max(timestamp) as timestamp                                                                                                                                          \n";                 
	    this.queryText += "                        FROM folhapagamento.padrao_padrao                                                                                                                                         \n";                
	    this.queryText += "                    GROUP BY cod_padrao) as max_padrao_padrao                                                                                                                                     \n";                 
	    this.queryText += "               WHERE contrato_servidor_padrao.cod_contrato = max_contrato_servidor_padrao.cod_contrato                                                                                            \n";                   
	    this.queryText += "                 AND contrato_servidor_padrao.timestamp = max_contrato_servidor_padrao.timestamp                                                                                                  \n";                   
	    this.queryText += "                 AND contrato_servidor_padrao.cod_padrao = padrao_padrao.cod_padrao                                                                                                               \n";                   
	    this.queryText += "                 AND padrao_padrao.cod_padrao = max_padrao_padrao.cod_padrao                                                                                                                      \n";                   
	    this.queryText += "                 AND padrao_padrao.timestamp = max_padrao_padrao.timestamp) as contrato_pensionista_padrao                                                                                        \n";                   
	    this.queryText += "         ON contrato_pensionista_padrao.cod_padrao = reajuste_padrao_padrao.cod_padrao                                                                                                            \n";
	    this.queryText += "     INNER JOIN folhapagamento.reajuste_contrato_servidor_salario                                                                                                                                 \n";
	    this.queryText += "            ON contrato_pensionista_padrao.cod_contrato = reajuste_contrato_servidor_salario.cod_contrato                                                                                         \n";                           
	    this.queryText += " INNER JOIN pessoal.contrato                                                                                                                                                                      \n";
	    this.queryText += "         ON contrato.cod_contrato = contrato_pensionista_padrao.cod_contrato                                                                                                                      \n";                            
	    this.queryText += " INNER JOIN pessoal.contrato_pensionista                                                                                                                                                          \n";  
	    this.queryText += "         ON contrato.cod_contrato = contrato_pensionista.cod_contrato                                                                                                                             \n";  
	    this.queryText += " INNER JOIN (SELECT contrato_pensionista_orgao.*                                                                                                                                                  \n";  
	    this.queryText += "               FROM pessoal.contrato_pensionista_orgao                                                                                                                                            \n";  
	    this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                                        \n";  
	    this.queryText += "                            , max(timestamp) as timestamp                                                                                                                                         \n";  
	    this.queryText += "                        FROM pessoal.contrato_pensionista_orgao                                                                                                                                   \n";  
	    this.queryText += "                    GROUP BY cod_contrato) as max_contrato_pensionista_orgao                                                                                                                      \n";  
	    this.queryText += "             WHERE contrato_pensionista_orgao.cod_contrato = max_contrato_pensionista_orgao.cod_contrato                                                                                          \n";  
	    this.queryText += "               AND contrato_pensionista_orgao.timestamp = max_contrato_pensionista_orgao.timestamp ) AS contrato_pensionista_orgao                                                                \n";  
	    this.queryText += "         ON contrato.cod_contrato = contrato_pensionista_orgao.cod_contrato                                                                                                                       \n";  
	    this.queryText += " INNER JOIN (SELECT pensionista.*                                                                                                                                                                 \n";  
	    this.queryText += "                  , (SELECT nom_cgm FROM sw_cgm WHERE sw_cgm.numcgm = pensionista.numcgm) as nom_cgm                                                                                              \n";  
	    this.queryText += "               FROM pessoal.pensionista) as pensionista                                                                                                                                           \n";         
	    this.queryText += "         ON contrato_pensionista.cod_pensionista = pensionista.cod_pensionista                                                                                                                    \n";  
	    this.queryText += "        AND contrato_pensionista.cod_contrato_cedente = pensionista.cod_contrato_cedente                                                                                                          \n";        
	    this.queryText += "  LEFT JOIN (SELECT contrato_servidor_especialidade_funcao.*                                                                                                                                      \n";  
	    this.queryText += "               FROM pessoal.contrato_servidor_especialidade_funcao                                                                                                                                \n";  
	    this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                                        \n";  
	    this.queryText += "                            , max(timestamp) as timestamp                                                                                                                                         \n";  
	    this.queryText += "                         FROM pessoal.contrato_servidor_especialidade_funcao                                                                                                                      \n";  
	    this.queryText += "                     GROUP BY cod_contrato) as max_contrato_servidor_especialidade_funcao                                                                                                         \n";  
	    this.queryText += "            WHERE contrato_servidor_especialidade_funcao.cod_contrato = max_contrato_servidor_especialidade_funcao.cod_contrato                                                                   \n";  
	    this.queryText += "              AND contrato_servidor_especialidade_funcao.timestamp = max_contrato_servidor_especialidade_funcao.timestamp ) AS contrato_pensionista_especialidade_funcao                          \n";  
	    this.queryText += "         ON pensionista.cod_contrato_cedente = contrato_pensionista_especialidade_funcao.cod_contrato                                                                                             \n";  
	    this.queryText += " INNER JOIN (SELECT contrato_servidor_regime_funcao.*                                                                                                                                             \n";  
	    this.queryText += "               FROM pessoal.contrato_servidor_regime_funcao                                                                                                                                       \n";  
	    this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                                        \n";  
	    this.queryText += "                            , max(timestamp) as timestamp                                                                                                                                         \n";  
	    this.queryText += "                         FROM pessoal.contrato_servidor_regime_funcao                                                                                                                             \n";  
	    this.queryText += "                     GROUP BY cod_contrato) as max_contrato_servidor_regime_funcao                                                                                                                \n";  
	    this.queryText += "               WHERE contrato_servidor_regime_funcao.cod_contrato = max_contrato_servidor_regime_funcao.cod_contrato                                                                              \n";  
	    this.queryText += "                 AND contrato_servidor_regime_funcao.timestamp = max_contrato_servidor_regime_funcao.timestamp ) AS contrato_pensionista_regime_funcao                                            \n";  
	    this.queryText += "         ON pensionista.cod_contrato_cedente = contrato_pensionista_regime_funcao.cod_contrato                                                                                                    \n";  
	    this.queryText += " INNER JOIN (SELECT contrato_servidor_funcao.*                                                                                                                                                    \n";  
	    this.queryText += "               FROM pessoal.contrato_servidor_funcao                                                                                                                                              \n";  
	    this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                                        \n";  
	    this.queryText += "                            , max(timestamp) as timestamp                                                                                                                                         \n";  
	    this.queryText += "                         FROM pessoal.contrato_servidor_funcao                                                                                                                                    \n";  
	    this.queryText += "                     GROUP BY cod_contrato) as max_contrato_servidor_funcao                                                                                                                       \n";  
	    this.queryText += "               WHERE contrato_servidor_funcao.cod_contrato = max_contrato_servidor_funcao.cod_contrato                                                                                            \n";  
	    this.queryText += "                 AND contrato_servidor_funcao.timestamp = max_contrato_servidor_funcao.timestamp ) AS contrato_pensionista_funcao                                                                 \n";  
	    this.queryText += "         ON pensionista.cod_contrato_cedente = contrato_pensionista_funcao.cod_contrato                                                                                                           \n";  
	    this.queryText += " INNER JOIN (SELECT contrato_servidor_sub_divisao_funcao.*                                                                                                                                        \n";  
	    this.queryText += "               FROM pessoal.contrato_servidor_sub_divisao_funcao                                                                                                                                  \n";  
	    this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                                        \n";  
	    this.queryText += "                            , max(timestamp) as timestamp                                                                                                                                         \n";  
	    this.queryText += "                         FROM pessoal.contrato_servidor_sub_divisao_funcao                                                                                                                        \n";  
	    this.queryText += "                     GROUP BY cod_contrato) as max_contrato_servidor_sub_divisao_funcao                                                                                                           \n";  
	    this.queryText += "               WHERE contrato_servidor_sub_divisao_funcao.cod_contrato = max_contrato_servidor_sub_divisao_funcao.cod_contrato                                                                    \n";  
	    this.queryText += "                 AND contrato_servidor_sub_divisao_funcao.timestamp = max_contrato_servidor_sub_divisao_funcao.timestamp ) AS contrato_pensionista_sub_divisao_funcao                             \n";  
	    this.queryText += "         ON pensionista.cod_contrato_cedente = contrato_pensionista_sub_divisao_funcao.cod_contrato                                                                                               \n";  
	    
        if (params["boAtributo"] == true) {
            	    this.queryText += " INNER JOIN ( SELECT atributo_contrato_pensionista.*                                                                                                                                                          \n";  
            	    this.queryText += "                FROM pessoal.atributo_contrato_pensionista                                                                                                                           \n";  
            	    this.queryText += "                   , (  SELECT cod_contrato                                                                                                                                                                   \n";  
            	    this.queryText += "                             , max(timestamp) as timestamp                                                                                                                                                    \n";  
            	    this.queryText += "                          FROM pessoal.atributo_contrato_pensionista                                                                                                                 \n";  
            	    this.queryText += "                      GROUP BY cod_contrato) as max_atributo_contrato_pensionista                                                                                                                             \n";  
            	    this.queryText += "               WHERE atributo_contrato_pensionista.cod_contrato = max_atributo_contrato_pensionista.cod_contrato                                                                                              \n";  
            	    this.queryText += "                 AND atributo_contrato_pensionista.timestamp = max_atributo_contrato_pensionista.timestamp ) AS atributo_contrato_pensionista                                                                 \n";  
            	    this.queryText += "         ON contrato.cod_contrato = atributo_contrato_pensionista.cod_contrato                                                                                                                                \n";  
        } 
	} else {
	    this.queryText  = "        SELECT sw_cgm.nom_cgm                                                                                                                                                                        \n";
	    this.queryText += "             , contrato.*                                                                                                                                                                            \n";               
	    this.queryText += "             , to_real(contrato_servidor_padrao.valor) AS valor                                                                                                                                      \n";
	    this.queryText += "             , recuperaDescricaoOrgao(contrato_servidor_orgao.cod_orgao,'"+params["exercicio"]+"-01-01'::date) AS orgao                                                                                \n";
	    this.queryText += "          FROM folhapagamento.reajuste_padrao_padrao                                                                                                                        \n";
	    this.queryText += "    INNER JOIN folhapagamento.reajuste                                                                                                                                      \n";
	    this.queryText += "            ON reajuste_padrao_padrao.cod_reajuste = reajuste.cod_reajuste                                                                                                                           \n";
	    this.queryText += "    INNER JOIN (SELECT contrato_servidor_padrao.*                                                                                                                                                    \n";                  
	    this.queryText += "                     , valor                                                                                                                                                                         \n";                  
	    this.queryText += "                  FROM pessoal.contrato_servidor_padrao                                                                                                                     \n";                 
	    this.queryText += "                     , ( SELECT cod_contrato                                                                                                                                                         \n";                 
	    this.queryText += "                              , max(timestamp) as timestamp                                                                                                                                          \n";                 
	    this.queryText += "                           FROM pessoal.contrato_servidor_padrao                                                                                                            \n";                
	    this.queryText += "                       GROUP BY cod_contrato) as max_contrato_servidor_padrao                                                                                                                        \n";                 
	    this.queryText += "                    , folhapagamento.padrao_padrao                                                                                                                          \n";                
	    this.queryText += "                    , (  SELECT cod_padrao                                                                                                                                                           \n";                 
	    this.queryText += "                              , max(timestamp) as timestamp                                                                                                                                          \n";                 
	    this.queryText += "                           FROM folhapagamento.padrao_padrao                                                                                                                \n";                
	    this.queryText += "                       GROUP BY cod_padrao) as max_padrao_padrao                                                                                                                                     \n";                 
	    this.queryText += "                  WHERE contrato_servidor_padrao.cod_contrato = max_contrato_servidor_padrao.cod_contrato                                                                                            \n";                   
	    this.queryText += "                    AND contrato_servidor_padrao.timestamp = max_contrato_servidor_padrao.timestamp                                                                                                  \n";                   
	    this.queryText += "                    AND contrato_servidor_padrao.cod_padrao = padrao_padrao.cod_padrao                                                                                                               \n";                   
	    this.queryText += "                    AND padrao_padrao.cod_padrao = max_padrao_padrao.cod_padrao                                                                                                                      \n";                   
	    this.queryText += "                    AND padrao_padrao.timestamp = max_padrao_padrao.timestamp) as contrato_servidor_padrao                                                                                           \n";                   
	    this.queryText += "            ON contrato_servidor_padrao.cod_padrao = reajuste_padrao_padrao.cod_padrao                                                                                                               \n";
	    this.queryText += "     INNER JOIN folhapagamento.reajuste_contrato_servidor_salario                                                                                                           \n";
	    this.queryText += "            ON contrato_servidor_padrao.cod_contrato = reajuste_contrato_servidor_salario.cod_contrato                                                                                               \n";                           
	    this.queryText += "           AND reajuste.cod_reajuste = reajuste_contrato_servidor_salario.cod_reajuste                                                                                                               \n";                           
	    this.queryText += "     INNER JOIN (SELECT contrato_servidor_salario.*                                                                                                                                                  \n";                     
	    this.queryText += "             FROM pessoal.contrato_servidor_salario                                                                                                                         \n";              
	    this.queryText += "                , (  SELECT cod_contrato                                                                                                                                                             \n";             
	    this.queryText += "                          , max(timestamp) as timestamp                                                                                                                                              \n";             
	    this.queryText += "                       FROM pessoal.contrato_servidor_salario                                                                                                               \n";              
	    this.queryText += "                   GROUP BY cod_contrato) as max_contrato_servidor_salario                                                                                                                           \n";               
	    this.queryText += "            WHERE contrato_servidor_salario.cod_contrato = max_contrato_servidor_salario.cod_contrato                                                                                                \n";                 
	    this.queryText += "              AND contrato_servidor_salario.timestamp = max_contrato_servidor_salario.timestamp ) AS contrato_servidor_salario                                                                       \n";                   
	    this.queryText += "       ON contrato_servidor_padrao.cod_contrato = contrato_servidor_salario.cod_contrato                                                                                                             \n";                                   
	    this.queryText += "    INNER JOIN pessoal.contrato                                                                                                                                             \n";
	    this.queryText += "            ON contrato.cod_contrato = contrato_servidor_padrao.cod_contrato                                                                                                                         \n";                            
	    this.queryText += "    INNER JOIN pessoal.servidor_contrato_servidor                                                                                                                           \n";
	    this.queryText += "            ON contrato.cod_contrato = servidor_contrato_servidor.cod_contrato                                                                                                                       \n";
	    this.queryText += "    INNER JOIN pessoal.servidor                                                                                                                                             \n";
	    this.queryText += "            ON servidor_contrato_servidor.cod_servidor = servidor.cod_servidor                                                                                                                       \n";
	    this.queryText += "    INNER JOIN sw_cgm                                                                                                                                                                                \n";
	    this.queryText += "            ON sw_cgm.numcgm = servidor.numcgm                                                                                                                                                       \n";
	    this.queryText += "    INNER JOIN (SELECT contrato_servidor_regime_funcao.*                                                                                                                                             \n";
	    this.queryText += "                  FROM pessoal.contrato_servidor_regime_funcao                                                                                                              \n";                  
	    this.queryText += "                     , (  SELECT cod_contrato                                                                                                                                                        \n";                  
	    this.queryText += "                               , max(timestamp) as timestamp                                                                                                                                         \n";                  
	    this.queryText += "                            FROM pessoal.contrato_servidor_regime_funcao                                                                                                    \n";                  
	    this.queryText += "                        GROUP BY cod_contrato) as max_contrato_servidor_regime_funcao                                                                                                                \n";                  
	    this.queryText += "                 WHERE contrato_servidor_regime_funcao.cod_contrato = max_contrato_servidor_regime_funcao.cod_contrato                                                                               \n";                  
	    this.queryText += "                   AND contrato_servidor_regime_funcao.timestamp = max_contrato_servidor_regime_funcao.timestamp ) AS contrato_servidor_regime_funcao                                                \n";               
	    this.queryText += "            ON contrato.cod_contrato = contrato_servidor_regime_funcao.cod_contrato                                                                                                                  \n";    
	    this.queryText += "    INNER JOIN ( SELECT contrato_servidor_sub_divisao_funcao.*                                                                                                                                       \n";                   
	    this.queryText += "                   FROM pessoal.contrato_servidor_sub_divisao_funcao                                                                                                        \n";                   
	    this.queryText += "                      , (  SELECT cod_contrato                                                                                                                                                       \n";                   
	    this.queryText += "                               , max(timestamp) as timestamp                                                                                                                                         \n";                  
	    this.queryText += "                            FROM pessoal.contrato_servidor_sub_divisao_funcao                                                                                               \n";                  
	    this.queryText += "                        GROUP BY cod_contrato) as max_contrato_servidor_sub_divisao_funcao                                                                                                           \n";                  
	    this.queryText += "                  WHERE contrato_servidor_sub_divisao_funcao.cod_contrato = max_contrato_servidor_sub_divisao_funcao.cod_contrato                                                                    \n";                   
	    this.queryText += "                    AND contrato_servidor_sub_divisao_funcao.timestamp = max_contrato_servidor_sub_divisao_funcao.timestamp ) AS contrato_servidor_sub_divisao_funcao                                \n";                   
	    this.queryText += "            ON contrato.cod_contrato = contrato_servidor_sub_divisao_funcao.cod_contrato                                                                                                             \n";                  
	    this.queryText += "    INNER JOIN (SELECT contrato_servidor_funcao.*                                                                                                                                                    \n";                  
	    this.queryText += "                  FROM pessoal.contrato_servidor_funcao                                                                                                                     \n";                  
	    this.queryText += "                     , (  SELECT cod_contrato                                                                                                                                                        \n";                  
	    this.queryText += "                               , max(timestamp) as timestamp                                                                                                                                         \n";                  
	    this.queryText += "                            FROM pessoal.contrato_servidor_funcao                                                                                                           \n";                  
	    this.queryText += "                        GROUP BY cod_contrato) as max_contrato_servidor_funcao                                                                                                                       \n";                  
	    this.queryText += "                  WHERE contrato_servidor_funcao.cod_contrato = max_contrato_servidor_funcao.cod_contrato                                                                                            \n";                   
	    this.queryText += "                    AND contrato_servidor_funcao.timestamp = max_contrato_servidor_funcao.timestamp ) AS contrato_servidor_funcao                                                                    \n";                   
	    this.queryText += "            ON contrato.cod_contrato = contrato_servidor_funcao.cod_contrato                                                                                                                         \n";                                       
	    this.queryText += "    INNER JOIN (SELECT contrato_servidor_orgao.*                                                                                                                                                     \n";                  
	    this.queryText += "                  FROM pessoal.contrato_servidor_orgao                                                                                                                      \n";                  
	    this.queryText += "                     , (  SELECT cod_contrato                                                                                                                                                        \n";                  
	    this.queryText += "                               , max(timestamp) as timestamp                                                                                                                                         \n";                  
	    this.queryText += "                            FROM pessoal.contrato_servidor_orgao                                                                                                            \n";                  
	    this.queryText += "                        GROUP BY cod_contrato) as max_contrato_servidor_orgao                                                                                                                        \n";                  
	    this.queryText += "                 WHERE contrato_servidor_orgao.cod_contrato = max_contrato_servidor_orgao.cod_contrato                                                                                               \n";                  
	    this.queryText += "                   AND contrato_servidor_orgao.timestamp = max_contrato_servidor_orgao.timestamp ) AS contrato_servidor_orgao                                                                        \n";                  
	    this.queryText += "            ON contrato.cod_contrato = contrato_servidor_orgao.cod_contrato                                                                                                                          \n";                  
	    this.queryText += "     LEFT JOIN (SELECT contrato_servidor_especialidade_funcao.*                                                                                                                                      \n";                  
	    this.queryText += "                  FROM pessoal.contrato_servidor_especialidade_funcao                                                                                                       \n";                  
	    this.queryText += "                     , (  SELECT cod_contrato                                                                                                                                                        \n";                  
	    this.queryText += "                               , max(timestamp) as timestamp                                                                                                                                         \n";                  
	    this.queryText += "                            FROM pessoal.contrato_servidor_especialidade_funcao                                                                                             \n";                  
	    this.queryText += "                        GROUP BY cod_contrato) as max_contrato_servidor_especialidade_funcao                                                                                                         \n";                  
	    this.queryText += "                  WHERE contrato_servidor_especialidade_funcao.cod_contrato = max_contrato_servidor_especialidade_funcao.cod_contrato                                                                \n";                   
	    this.queryText += "                    AND contrato_servidor_especialidade_funcao.timestamp = max_contrato_servidor_especialidade_funcao.timestamp ) AS contrato_servidor_especialidade_funcao                          \n";                   
	    this.queryText += "            ON contrato.cod_contrato = contrato_servidor_especialidade_funcao.cod_contrato                                                                                                           \n";
	
	    if (params["boAtributo"] == true) {
	            this.queryText += " INNER JOIN (SELECT atributo_contrato_servidor_valor.*                                                                                                                        \n";  
	            this.queryText += "               FROM pessoal.atributo_contrato_servidor_valor                                                                                                                  \n";  
	            this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                    \n";  
	            this.queryText += "                            , max(timestamp) as timestamp                                                                                                                     \n";  
	            this.queryText += "                         FROM pessoal.atributo_contrato_servidor_valor                                                                                                        \n";  
	            this.queryText += "                     GROUP BY cod_contrato) as max_atributo_contrato_servidor_valor                                                                                           \n";  
	            this.queryText += "               WHERE atributo_contrato_servidor_valor.cod_contrato = max_atributo_contrato_servidor_valor.cod_contrato                                                        \n";  
	            this.queryText += "                 AND atributo_contrato_servidor_valor.timestamp = max_atributo_contrato_servidor_valor.timestamp ) AS atributo_contrato_servidor_valor                        \n";  
	            this.queryText += "         ON contrato.cod_contrato = atributo_contrato_servidor_valor.cod_contrato                                                                                             \n";  
	    }
	}
	this.queryText += "          WHERE reajuste.cod_reajuste = "+params["inCodReajuste"];

	if (params["boAposentado"] == true || params["boServidor"] == true) {    
	    if (params["boAposentado"] == true ) { 
	       this.queryText += "AND EXISTS ( \n"; 
	    }
	    if(params["boServidor"] == true ){ 
	        this.queryText += "AND NOT EXISTS ( \n"; 
	    }
	    this.queryText += "SELECT 1                                                                                                  \n"; 
	    this.queryText += "  FROM pessoal.aposentadoria                                                                              \n"; 
	    this.queryText += "     , (SELECT cod_contrato                                                                               \n"; 
	    this.queryText += "             , max(timestamp) as timestamp                                                                \n"; 
	    this.queryText += "          FROM pessoal.aposentadoria                                                                      \n"; 
	    this.queryText += "        GROUP BY cod_contrato) as max_aposentadoria                                                       \n"; 
	    this.queryText += " WHERE aposentadoria.cod_contrato = max_aposentadoria.cod_contrato                                        \n"; 
	    this.queryText += "   AND aposentadoria.timestamp = max_aposentadoria.timestamp                                              \n"; 
	    this.queryText += "   AND NOT EXISTS (SELECT 1                                                                               \n"; 
	    this.queryText += "                     FROM pessoal.aposentadoria_excluida                                                  \n"; 
	    this.queryText += "                    WHERE aposentadoria.cod_contrato = aposentadoria_excluida.cod_contrato                \n"; 
	    this.queryText += "                      AND aposentadoria.timestamp = aposentadoria.timestamp)                              \n";
	
	    if(params["boAposentado"] == true ){ 
	        this.queryText += "   AND NOT EXISTS (SELECT 1                                                                           \n"; 
	        this.queryText += "                     FROM pessoal.aposentadoria_encerramento                                          \n"; 
	        this.queryText += "                    WHERE aposentadoria.cod_contrato = aposentadoria_encerramento.cod_contrato        \n"; 
	        this.queryText += "                      AND aposentadoria.timestamp = aposentadoria_encerramento.timestamp              \n";
	        this.queryText += "                      AND to_char(dt_encerramento,'yyyy-mm') != '"+params["competencia"]+"')          \n"; 
	    }            
	    this.queryText += "   AND contrato.cod_contrato = aposentadoria.cod_contrato)                                                \n";
    }
} else {
	// Buscando por evento
	if (params["inCodConfiguracao"] == 0) {
	    this.queryText  = "       SELECT contrato.*                                                                                                          \n";
	    if (params["fixado"] == "V") {
	    	this.queryText += "             , to_real(registro_evento_complementar.valor) as valor                                                           \n";
	    } else {
	    	this.queryText += "             , to_real(registro_evento_complementar.quantidade) as valor                                                 \n";
	    }
	    this.queryText += "             , sw_cgm.nom_cgm                                                                                                                                                         \n"; 
	    this.queryText += "             , recuperaDescricaoOrgao(contrato_servidor_orgao.cod_orgao,'"+params["exercicio"]+"-01-01'::date) AS orgao                                                                 \n";
	    this.queryText += "          FROM folhapagamento.reajuste                                                                                                                                                \n";
	    this.queryText += "    INNER JOIN folhapagamento.reajuste_registro_evento_complementar                                                                                                                   \n";
	    this.queryText += "            ON reajuste.cod_reajuste = reajuste_registro_evento_complementar.cod_reajuste                                                                                             \n";
	    this.queryText += "    INNER JOIN folhapagamento.registro_evento_complementar                                                                                                                            \n";
	    this.queryText += "            ON reajuste_registro_evento_complementar.cod_registro     = registro_evento_complementar.cod_registro                                                                     \n";
	    this.queryText += "           AND reajuste_registro_evento_complementar.timestamp        = registro_evento_complementar.timestamp                                                                        \n";
	    this.queryText += "           AND reajuste_registro_evento_complementar.cod_evento       = registro_evento_complementar.cod_evento                                                                       \n";
	    this.queryText += "           AND reajuste_registro_evento_complementar.cod_configuracao = registro_evento_complementar.cod_configuracao                                                                 \n";
	    this.queryText += "    INNER JOIN folhapagamento.evento                                                                                                                                                  \n";
	    this.queryText += "            ON registro_evento_complementar.cod_evento = evento.cod_evento                                                                                                            \n";
	    this.queryText += "    INNER JOIN pessoal.contrato                                                                                                                                                       \n";
	    this.queryText += "            ON registro_evento_complementar.cod_contrato = contrato.cod_contrato                                                                                                      \n";
	} 

    if (params["inCodConfiguracao"] == 1) { 
        this.queryText  = "        SELECT contrato.*                                                                                                                                \n";
        if (params["fixado"] == "V") {
            this.queryText += "             , to_real(registro_evento.valor) as valor                                                                                               \n";
        } else {
            this.queryText += "             , to_real(registro_evento.quantidade) as valor                                                                                          \n";
        }
        this.queryText += "             , sw_cgm.nom_cgm                                                                                                                            \n";  
        this.queryText += "             , recuperaDescricaoOrgao(contrato_servidor_orgao.cod_orgao,'"+params["exercicio"]+"-01-01'::date) AS orgao                                    \n";                                                                   
        this.queryText += "          FROM folhapagamento.reajuste                                                                                                                   \n";
        this.queryText += "    INNER JOIN folhapagamento.reajuste_registro_evento                                                                                                   \n";
        this.queryText += "            ON reajuste.cod_reajuste = reajuste_registro_evento.cod_reajuste                                                                             \n";
        this.queryText += "    INNER JOIN folhapagamento.registro_evento_periodo                                                                                                    \n";
        this.queryText += "            ON reajuste_registro_evento.cod_registro = registro_evento_periodo.cod_registro                                                              \n";
        this.queryText += "    INNER JOIN folhapagamento.registro_evento                                                                                                            \n";
        this.queryText += "            ON reajuste_registro_evento.cod_registro     = registro_evento.cod_registro                                                                  \n";
        this.queryText += "           AND reajuste_registro_evento.timestamp        = registro_evento.timestamp                                                                     \n";
        this.queryText += "           AND reajuste_registro_evento.cod_evento       = registro_evento.cod_evento                                                                    \n";
        this.queryText += "    INNER JOIN folhapagamento.evento                                                                                                                     \n";
        this.queryText += "            ON registro_evento.cod_evento = evento.cod_evento                                                                                            \n";
        this.queryText += "    INNER JOIN pessoal.contrato                                                                                                                          \n";
        this.queryText += "            ON registro_evento_periodo.cod_contrato = contrato.cod_contrato                                                                              \n";
    }	
    
    if (params["inCodConfiguracao"] == 2) { 
        this.queryText  = "        SELECT contrato.*                                                                                                                                \n";
        if (params["fixado"] == "V") {
            this.queryText += "             , to_real(registro_evento_ferias.valor) as valor                                                                                        \n";
        } else {
            this.queryText += "             , to_real(registro_evento_ferias.quantidade) as valor                                                                                   \n";
        }       
        this.queryText += "             , sw_cgm.nom_cgm                                                                                                                            \n";
        this.queryText += "             , recuperaDescricaoOrgao(contrato_servidor_orgao.cod_orgao,'"+params["exercicio"]+"-01-01'::date) AS orgao                                    \n";
        this.queryText += "          FROM folhapagamento.reajuste                                                                                                                   \n";
        this.queryText += "    INNER JOIN folhapagamento.reajuste_registro_evento_ferias                                                                                            \n";
        this.queryText += "            ON reajuste.cod_reajuste = reajuste_registro_evento_ferias.cod_reajuste                                                                      \n";
        this.queryText += "    INNER JOIN folhapagamento.registro_evento_ferias                                                                                                     \n";
        this.queryText += "            ON reajuste_registro_evento_ferias.cod_registro     = registro_evento_ferias.cod_registro                                                    \n";
        this.queryText += "           AND reajuste_registro_evento_ferias.timestamp        = registro_evento_ferias.timestamp                                                       \n";
        this.queryText += "           AND reajuste_registro_evento_ferias.cod_evento       = registro_evento_ferias.cod_evento                                                      \n";
        this.queryText += "    INNER JOIN folhapagamento.evento                                                                                                                     \n";
        this.queryText += "            ON registro_evento_ferias.cod_evento = evento.cod_evento                                                                                     \n";
        this.queryText += "    INNER JOIN pessoal.contrato                                                                                                                          \n";
        this.queryText += "            ON registro_evento_ferias.cod_contrato = contrato.cod_contrato                                                                               \n";        
    }    
    
    if (params["inCodConfiguracao"] == 3) {
         this.queryText  = "        SELECT contrato.*   \n";
         if (params["fixado"] == "V") {
         	this.queryText += "             , to_real(registro_evento_decimo.valor) as valor \n";
         } else {
			this.queryText += "             , to_real(registro_evento_decimo.quantidade) as valor \n";         
         }
        this.queryText += "             , sw_cgm.nom_cgm                                                                                                                             \n";
        this.queryText += "             , recuperaDescricaoOrgao(contrato_servidor_orgao.cod_orgao,'"+params["exercicio"]+"-01-01'::date) AS orgao                                     \n";       
        this.queryText += "          FROM folhapagamento.reajuste                                                                                                                    \n";
        this.queryText += "    INNER JOIN folhapagamento.reajuste_registro_evento_decimo                                                                                             \n";
        this.queryText += "            ON reajuste.cod_reajuste = reajuste_registro_evento_decimo.cod_reajuste                                                                       \n";
        this.queryText += "    INNER JOIN folhapagamento.registro_evento_decimo                                                                                                      \n";
        this.queryText += "            ON reajuste_registro_evento_decimo.cod_registro     = registro_evento_decimo.cod_registro                                                     \n";
        this.queryText += "           AND reajuste_registro_evento_decimo.timestamp        = registro_evento_decimo.timestamp                                                        \n";
        this.queryText += "           AND reajuste_registro_evento_decimo.cod_evento       = registro_evento_decimo.cod_evento                                                       \n";
        this.queryText += "    INNER JOIN folhapagamento.evento                                                                                                                      \n";
        this.queryText += "            ON registro_evento_decimo.cod_evento = evento.cod_evento                                                                                      \n";
        this.queryText += "    INNER JOIN pessoal.contrato                                                                                                                           \n";
        this.queryText += "            ON registro_evento_decimo.cod_contrato = contrato.cod_contrato                                                                                \n";         
    }
    
    if (params["inCodConfiguracao"] == 4) {
        this.queryText  = "        SELECT contrato.*                                                                                                                                 \n";
        if (params["fixado"] == "V") {
            this.queryText += "             , to_real(registro_evento_rescisao.valor) as valor                                                                                       \n";
        } else {
            this.queryText += "             , to_real(registro_evento_rescisao.quantidade) as quantidade                                                                             \n";
        }
        this.queryText += "          , pensionista.nom_cgm                                                                                                                           \n";                                                                              
        this.queryText += "          , recuperaDescricaoOrgao(contrato_pensionista_orgao.cod_orgao,'"+params["exercicio"]+"-01-01'::date) as orgao                                     \n";        
        this.queryText += "       FROM folhapagamento.reajuste                                                                                                                       \n";
        this.queryText += " INNER JOIN folhapagamento.reajuste_registro_evento_rescisao                                                                                              \n";
        this.queryText += "         ON reajuste.cod_reajuste = reajuste_registro_evento_rescisao.cod_reajuste                                                                        \n";
        this.queryText += " INNER JOIN folhapagamento.registro_evento_rescisao                                                                                                       \n";
        this.queryText += "         ON reajuste_registro_evento_rescisao.cod_registro     = registro_evento_rescisao.cod_registro                                                    \n";
        this.queryText += "        AND reajuste_registro_evento_rescisao.timestamp        = registro_evento_rescisao.timestamp                                                       \n";
        this.queryText += "        AND reajuste_registro_evento_rescisao.cod_evento       = registro_evento_rescisao.cod_evento                                                      \n";
        this.queryText += " INNER JOIN folhapagamento.evento                                                                                                                         \n";
        this.queryText += "         ON registro_evento_rescisao.cod_evento = evento.cod_evento                                                                                       \n";
        this.queryText += " INNER JOIN pessoal.contrato                                                                                                                              \n";
        this.queryText += "         ON registro_evento_rescisao.cod_contrato = contrato.cod_contrato                                                                                 \n";   
    }    
    
    if(params["boPensionista"] == true){
	    this.queryText += " INNER JOIN pessoal.contrato_pensionista                                                                                                                                                \n";  
	    this.queryText += "         ON contrato.cod_contrato = contrato_pensionista.cod_contrato                                                                                                                   \n";  
	    this.queryText += " INNER JOIN (SELECT contrato_pensionista_orgao.*                                                                                                                                        \n";  
	    this.queryText += "               FROM pessoal.contrato_pensionista_orgao                                                                                                                                  \n";  
	    this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                              \n";  
	    this.queryText += "                            , max(timestamp) as timestamp                                                                                                                               \n";  
	    this.queryText += "                        FROM pessoal.contrato_pensionista_orgao                                                                                                                         \n";  
	    this.queryText += "                    GROUP BY cod_contrato) as max_contrato_pensionista_orgao                                                                                                            \n";  
	    this.queryText += "             WHERE contrato_pensionista_orgao.cod_contrato = max_contrato_pensionista_orgao.cod_contrato                                                                                \n";  
	    this.queryText += "               AND contrato_pensionista_orgao.timestamp = max_contrato_pensionista_orgao.timestamp ) AS contrato_pensionista_orgao                                                      \n";  
	    this.queryText += "         ON contrato.cod_contrato = contrato_pensionista_orgao.cod_contrato                                                                                                             \n";  
	    this.queryText += " INNER JOIN (SELECT pensionista.*                                                                                                                                                       \n";  
	    this.queryText += "                  , (SELECT nom_cgm FROM sw_cgm WHERE sw_cgm.numcgm = pensionista.numcgm) as nom_cgm                                                                                    \n";  
	    this.queryText += "               FROM pessoal.pensionista) as pensionista                                                                                                                                 \n";         
	    this.queryText += "         ON contrato_pensionista.cod_pensionista = pensionista.cod_pensionista                                                                                                          \n";  
	    this.queryText += "        AND contrato_pensionista.cod_contrato_cedente = pensionista.cod_contrato_cedente                                                                                                \n";        
	    this.queryText += "  LEFT JOIN (SELECT contrato_servidor_especialidade_funcao.*                                                                                                                            \n";  
	    this.queryText += "               FROM pessoal.contrato_servidor_especialidade_funcao                                                                                                                      \n";  
	    this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                              \n";  
	    this.queryText += "                            , max(timestamp) as timestamp                                                                                                                               \n";  
	    this.queryText += "                         FROM pessoal.contrato_servidor_especialidade_funcao                                                                                                            \n";  
	    this.queryText += "                     GROUP BY cod_contrato) as max_contrato_servidor_especialidade_funcao                                                                                               \n";  
	    this.queryText += "            WHERE contrato_servidor_especialidade_funcao.cod_contrato = max_contrato_servidor_especialidade_funcao.cod_contrato                                                         \n";  
	    this.queryText += "              AND contrato_servidor_especialidade_funcao.timestamp = max_contrato_servidor_especialidade_funcao.timestamp ) AS contrato_pensionista_especialidade_funcao                \n";  
	    this.queryText += "         ON pensionista.cod_contrato_cedente = contrato_pensionista_especialidade_funcao.cod_contrato                                                                                   \n";  
	    this.queryText += " INNER JOIN (SELECT contrato_servidor_regime_funcao.*                                                                                                                                   \n";  
	    this.queryText += "               FROM pessoal.contrato_servidor_regime_funcao                                                                                                                             \n";  
	    this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                              \n";  
	    this.queryText += "                            , max(timestamp) as timestamp                                                                                                                               \n";  
	    this.queryText += "                         FROM pessoal.contrato_servidor_regime_funcao                                                                                                                   \n";  
	    this.queryText += "                     GROUP BY cod_contrato) as max_contrato_servidor_regime_funcao                                                                                                      \n";  
	    this.queryText += "               WHERE contrato_servidor_regime_funcao.cod_contrato = max_contrato_servidor_regime_funcao.cod_contrato                                                                    \n";  
	    this.queryText += "                 AND contrato_servidor_regime_funcao.timestamp = max_contrato_servidor_regime_funcao.timestamp ) AS contrato_pensionista_regime_funcao                                  \n";  
	    this.queryText += "         ON pensionista.cod_contrato_cedente = contrato_pensionista_regime_funcao.cod_contrato                                                                                          \n";  
	    this.queryText += " INNER JOIN (SELECT contrato_servidor_funcao.*                                                                                                                                          \n";  
	    this.queryText += "               FROM pessoal.contrato_servidor_funcao                                                                                                                                    \n";  
	    this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                              \n";  
	    this.queryText += "                            , max(timestamp) as timestamp                                                                                                                               \n";  
	    this.queryText += "                         FROM pessoal.contrato_servidor_funcao                                                                                                                          \n";  
	    this.queryText += "                     GROUP BY cod_contrato) as max_contrato_servidor_funcao                                                                                                             \n";  
	    this.queryText += "               WHERE contrato_servidor_funcao.cod_contrato = max_contrato_servidor_funcao.cod_contrato                                                                                  \n";  
	    this.queryText += "                 AND contrato_servidor_funcao.timestamp = max_contrato_servidor_funcao.timestamp ) AS contrato_pensionista_funcao                                                       \n";  
	    this.queryText += "         ON pensionista.cod_contrato_cedente = contrato_pensionista_funcao.cod_contrato                                                                                                 \n";  
	    this.queryText += " INNER JOIN (SELECT contrato_servidor_sub_divisao_funcao.*                                                                                                                              \n";  
	    this.queryText += "               FROM pessoal.contrato_servidor_sub_divisao_funcao                                                                                                                        \n";  
	    this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                              \n";  
	    this.queryText += "                            , max(timestamp) as timestamp                                                                                                                               \n";  
	    this.queryText += "                         FROM pessoal.contrato_servidor_sub_divisao_funcao                                                                                                              \n";  
	    this.queryText += "                     GROUP BY cod_contrato) as max_contrato_servidor_sub_divisao_funcao                                                                                                 \n";  
	    this.queryText += "               WHERE contrato_servidor_sub_divisao_funcao.cod_contrato = max_contrato_servidor_sub_divisao_funcao.cod_contrato                                                          \n";  
	    this.queryText += "                 AND contrato_servidor_sub_divisao_funcao.timestamp = max_contrato_servidor_sub_divisao_funcao.timestamp ) AS contrato_pensionista_sub_divisao_funcao                   \n";  
	    this.queryText += "         ON pensionista.cod_contrato_cedente = contrato_pensionista_sub_divisao_funcao.cod_contrato                                                                                     \n";  
	    this.queryText += "  LEFT JOIN (SELECT contrato_servidor_local.*                                                                                                                                           \n";  
	    this.queryText += "               FROM pessoal.contrato_servidor_local                                                                                                                                     \n";  
	    this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                              \n";  
	    this.queryText += "                            , max(timestamp) as timestamp                                                                                                                               \n";  
	    this.queryText += "                         FROM pessoal.contrato_servidor_local                                                                                                                           \n";  
	    this.queryText += "                     GROUP BY cod_contrato) as max_contrato_servidor_local                                                                                                              \n";  
	    this.queryText += "               WHERE contrato_servidor_local.cod_contrato = max_contrato_servidor_local.cod_contrato                                                                                    \n";  
	    this.queryText += "                 AND contrato_servidor_local.timestamp = max_contrato_servidor_local.timestamp ) AS contrato_pensionista_local                                                          \n";  
	    this.queryText += "         ON pensionista.cod_contrato_cedente = contrato_pensionista_local.cod_contrato                                                                                                  \n";  
	    this.queryText += " INNER JOIN ( SELECT contrato_servidor_padrao.*                                                                                                                                         \n";  
	    this.queryText += "                    , padrao.descricao as padrao                                                                                                                                        \n";  
	    this.queryText += "                    , valor                                                                                                                                                             \n";  
	    this.queryText += "                 FROM pessoal.contrato_servidor_padrao                                                                                                                                  \n";  
	    this.queryText += "                    , (  SELECT cod_contrato                                                                                                                                            \n";  
	    this.queryText += "                              , max(timestamp) as timestamp                                                                                                                             \n";  
	    this.queryText += "                           FROM pessoal.contrato_servidor_padrao                                                                                                                        \n";  
	    this.queryText += "                       GROUP BY cod_contrato) as max_contrato_servidor_padrao                                                                                                           \n";  
	    this.queryText += "                    , folhapagamento.padrao_padrao                                                                                                                                      \n";  
	    this.queryText += "                    , folhapagamento.padrao                                                                                                                                             \n";  
	    this.queryText += "                    , (  SELECT cod_padrao                                                                                                                                              \n";  
	    this.queryText += "                              , max(timestamp) as timestamp                                                                                                                             \n";  
	    this.queryText += "                           FROM folhapagamento.padrao_padrao                                                                                                                            \n";  
	    this.queryText += "                       GROUP BY cod_padrao) as max_padrao_padrao                                                                                                                        \n";  
	    this.queryText += "                WHERE contrato_servidor_padrao.cod_contrato = max_contrato_servidor_padrao.cod_contrato                                                                                 \n";  
	    this.queryText += "                  AND contrato_servidor_padrao.timestamp = max_contrato_servidor_padrao.timestamp                                                                                       \n";  
	    this.queryText += "                  AND contrato_servidor_padrao.cod_padrao = padrao_padrao.cod_padrao                                                                                                    \n";  
	    this.queryText += "                  AND padrao_padrao.cod_padrao = padrao.cod_padrao                                                                                                                      \n";  
	    this.queryText += "                  AND padrao_padrao.cod_padrao = max_padrao_padrao.cod_padrao                                                                                                           \n";  
	    this.queryText += "                  AND padrao_padrao.timestamp = max_padrao_padrao.timestamp) as contrato_pensionista_padrao                                                                             \n";  
	    this.queryText += "         ON pensionista.cod_contrato_cedente = contrato_pensionista_padrao.cod_contrato                                                                                                 \n";
	    
	    if (params["boAtributo"] == true) {
            this.queryText += " INNER JOIN ( SELECT atributo_contrato_pensionista.*                                                                                                                                                          \n";  
            this.queryText += "                FROM pessoal.atributo_contrato_pensionista                                                                                                                           \n";  
            this.queryText += "                   , (  SELECT cod_contrato                                                                                                                                                                   \n";  
            this.queryText += "                             , max(timestamp) as timestamp                                                                                                                                                    \n";  
            this.queryText += "                          FROM pessoal.atributo_contrato_pensionista                                                                                                                 \n";  
            this.queryText += "                      GROUP BY cod_contrato) as max_atributo_contrato_pensionista                                                                                                                             \n";  
            this.queryText += "               WHERE atributo_contrato_pensionista.cod_contrato = max_atributo_contrato_pensionista.cod_contrato                                                                                              \n";  
            this.queryText += "                 AND atributo_contrato_pensionista.timestamp = max_atributo_contrato_pensionista.timestamp ) AS atributo_contrato_pensionista                                                                 \n";  
            this.queryText += "         ON contrato.cod_contrato = atributo_contrato_pensionista.cod_contrato                                                                                                                                \n";  
    	}    
    }else{
	    this.queryText += "    INNER JOIN pessoal.servidor_contrato_servidor                                                                                                        \n";
	    this.queryText += "            ON contrato.cod_contrato = servidor_contrato_servidor.cod_contrato                                                                           \n";
	    this.queryText += "    INNER JOIN pessoal.servidor                                                                                                                          \n";
	    this.queryText += "            ON servidor_contrato_servidor.cod_servidor = servidor.cod_servidor                                                                           \n";
	    this.queryText += "    INNER JOIN sw_cgm                                                                                                                                    \n";
	    this.queryText += "            ON sw_cgm.numcgm = servidor.numcgm                                                                                                           \n";
	    this.queryText += "    INNER JOIN (SELECT contrato_servidor_regime_funcao.*                                                                                                 \n";                                 
	    this.queryText += "                  FROM pessoal.contrato_servidor_regime_funcao                                                                                           \n";                                 
	    this.queryText += "                     , (  SELECT cod_contrato                                                                                                            \n";                                 
	    this.queryText += "                               , max(timestamp) as timestamp                                                                                             \n";                                 
	    this.queryText += "                            FROM pessoal.contrato_servidor_regime_funcao                                                                                 \n";                                 
	    this.queryText += "                        GROUP BY cod_contrato) as max_contrato_servidor_regime_funcao                                                                    \n";                                 
	    this.queryText += "                 WHERE contrato_servidor_regime_funcao.cod_contrato = max_contrato_servidor_regime_funcao.cod_contrato                                   \n";                                 
	    this.queryText += "                   AND contrato_servidor_regime_funcao.timestamp = max_contrato_servidor_regime_funcao.timestamp ) AS contrato_servidor_regime_funcao    \n";                              
	    this.queryText += "            ON contrato.cod_contrato = contrato_servidor_regime_funcao.cod_contrato                                                                      \n";                   
	    this.queryText += "    INNER JOIN ( SELECT contrato_servidor_sub_divisao_funcao.*                                                                                           \n";                                  
	    this.queryText += "                   FROM pessoal.contrato_servidor_sub_divisao_funcao                                                                                     \n";                                  
	    this.queryText += "                      , (  SELECT cod_contrato                                                                                                           \n";                                  
	    this.queryText += "                               , max(timestamp) as timestamp                                                                                             \n";                                 
	    this.queryText += "                            FROM pessoal.contrato_servidor_sub_divisao_funcao                                                                            \n";                                 
	    this.queryText += "                        GROUP BY cod_contrato) as max_contrato_servidor_sub_divisao_funcao                                                               \n";                                 
	    this.queryText += "                  WHERE contrato_servidor_sub_divisao_funcao.cod_contrato = max_contrato_servidor_sub_divisao_funcao.cod_contrato                        \n";                                  
	    this.queryText += "                    AND contrato_servidor_sub_divisao_funcao.timestamp = max_contrato_servidor_sub_divisao_funcao.timestamp ) AS contrato_servidor_sub_divisao_funcao             \n";                                  
	    this.queryText += "            ON contrato.cod_contrato = contrato_servidor_sub_divisao_funcao.cod_contrato                                                                 \n";                                 
	    this.queryText += "    INNER JOIN (SELECT contrato_servidor_funcao.*                                                                                                        \n";                                 
	    this.queryText += "                  FROM pessoal.contrato_servidor_funcao                                                                                                  \n";                                 
	    this.queryText += "                     , (  SELECT cod_contrato                                                                                                            \n";                                 
	    this.queryText += "                               , max(timestamp) as timestamp                                                                                             \n";                                 
	    this.queryText += "                            FROM pessoal.contrato_servidor_funcao                                                                                        \n";                                 
	    this.queryText += "                        GROUP BY cod_contrato) as max_contrato_servidor_funcao                                                                           \n";                                 
	    this.queryText += "                  WHERE contrato_servidor_funcao.cod_contrato = max_contrato_servidor_funcao.cod_contrato                                                \n";                                  
	    this.queryText += "                    AND contrato_servidor_funcao.timestamp = max_contrato_servidor_funcao.timestamp ) AS contrato_servidor_funcao                        \n";                                  
	    this.queryText += "            ON contrato.cod_contrato = contrato_servidor_funcao.cod_contrato                                                                             \n";                                                      
	    this.queryText += "    INNER JOIN (SELECT contrato_servidor_orgao.*                                                                                                         \n";                                 
	    this.queryText += "                  FROM pessoal.contrato_servidor_orgao                                                                                                   \n";                                 
	    this.queryText += "                     , (  SELECT cod_contrato                                                                                                            \n";                                 
	    this.queryText += "                               , max(timestamp) as timestamp                                                                                             \n";                                 
	    this.queryText += "                            FROM pessoal.contrato_servidor_orgao                                                                                         \n";                                 
	    this.queryText += "                        GROUP BY cod_contrato) as max_contrato_servidor_orgao                                                                            \n";                                 
	    this.queryText += "                 WHERE contrato_servidor_orgao.cod_contrato = max_contrato_servidor_orgao.cod_contrato                                                   \n";                                 
	    this.queryText += "                   AND contrato_servidor_orgao.timestamp = max_contrato_servidor_orgao.timestamp ) AS contrato_servidor_orgao                            \n";                                 
	    this.queryText += "            ON contrato.cod_contrato = contrato_servidor_orgao.cod_contrato                                                                              \n";                                 
	    this.queryText += "     LEFT JOIN (SELECT contrato_servidor_especialidade_funcao.*                                                                                          \n";                                 
	    this.queryText += "                  FROM pessoal.contrato_servidor_especialidade_funcao                                                                                    \n";                                 
	    this.queryText += "                     , (  SELECT cod_contrato                                                                                                            \n";                                 
	    this.queryText += "                               , max(timestamp) as timestamp                                                                                             \n";                                 
	    this.queryText += "                            FROM pessoal.contrato_servidor_especialidade_funcao                                                                          \n";                                 
	    this.queryText += "                        GROUP BY cod_contrato) as max_contrato_servidor_especialidade_funcao                                                             \n";                                 
	    this.queryText += "                  WHERE contrato_servidor_especialidade_funcao.cod_contrato = max_contrato_servidor_especialidade_funcao.cod_contrato                    \n";                                  
	    this.queryText += "                    AND contrato_servidor_especialidade_funcao.timestamp = max_contrato_servidor_especialidade_funcao.timestamp ) AS contrato_servidor_especialidade_funcao       \n";                                  
	    this.queryText += "            ON contrato.cod_contrato = contrato_servidor_especialidade_funcao.cod_contrato                                                                                        \n";
	    
        if (params["boAtributo"] == true) {
	    this.queryText += " INNER JOIN (SELECT atributo_contrato_servidor_valor.*                                                                                                                        \n";  
	    this.queryText += "               FROM pessoal.atributo_contrato_servidor_valor                                                                                                                  \n";  
	    this.queryText += "                  , (  SELECT cod_contrato                                                                                                                                    \n";  
	    this.queryText += "                            , max(timestamp) as timestamp                                                                                                                     \n";  
	    this.queryText += "                         FROM pessoal.atributo_contrato_servidor_valor                                                                                                        \n";  
	    this.queryText += "                     GROUP BY cod_contrato) as max_atributo_contrato_servidor_valor                                                                                           \n";  
	    this.queryText += "               WHERE atributo_contrato_servidor_valor.cod_contrato = max_atributo_contrato_servidor_valor.cod_contrato                                                        \n";  
	    this.queryText += "                 AND atributo_contrato_servidor_valor.timestamp = max_atributo_contrato_servidor_valor.timestamp ) AS atributo_contrato_servidor_valor                        \n";  
	    this.queryText += "         ON contrato.cod_contrato = atributo_contrato_servidor_valor.cod_contrato                                                                                             \n";  
        }
    }
    this.queryText += "          WHERE reajuste.cod_reajuste = "+params["inCodReajuste"];
}
// Filtros
this.queryText += "         AND NOT EXISTS ( SELECT cod_contrato                                                                                                                                       \n";  
this.queryText += "                              FROM pessoal.contrato_servidor_caso_causa                                                                                                               \n";  
this.queryText += "                             WHERE to_char(dt_rescisao,'yyyy-mm') <= '"+params["competencia"]+"'                                                                                      \n";  
this.queryText += "                               AND contrato.cod_contrato = cod_contrato)                                                                                                              \n";  	
  	
if (params["stTipoFiltro"] == "contrato" || params["stTipoFiltro"] == "cgm_contrato") {
	this.queryText += "    AND contrato.cod_contrato = "+params["codigos"];	
}
  
if (params["stTipoFiltro"] == "lotacao") {
	this.queryText += "    AND contrato_servidor_orgao.cod_orgao = "+params["codigos"];	
}

if (params["stTipoFiltro"] == "local") {	
	this.queryText += " AND EXISTS ( SELECT contrato_servidor_local.*                                                                                                                                                                     \n";  
    this.queryText += "                FROM pessoal.contrato_servidor_local                                                                                                                                     \n";  
    this.queryText += "                   , (  SELECT cod_contrato                                                                                                                                                                        \n";  
    this.queryText += "                             , max(timestamp) as timestamp                                                                                                                                                         \n";  
    this.queryText += "                          FROM pessoal.contrato_servidor_local                                                                                                                           \n";  
    this.queryText += "                      GROUP BY cod_contrato) as max_contrato_servidor_local                                                                                                                                        \n";  
    this.queryText += "                WHERE contrato_servidor_local.cod_contrato = max_contrato_servidor_local.cod_contrato                                                                                                               \n";  
    this.queryText += "                  AND contrato_servidor_local.timestamp = max_contrato_servidor_local.timestamp                                                                                         \n";
    this.queryText += "                  AND contrato.cod_contrato = contrato_servidor_local.cod_contrato                                                                                        \n";
    this.queryText += "                  AND contrato_servidor_local.cod_local IN ("+params["codigos"]+"))";	
}

if(params["stTipoFiltro"] == "atributo_servidor"){
	if(params["boPensionista"] == true){
        this.queryText += " AND atributo_contrato_pensionista.cod_atributo = "+params["inCodAtributo"];
        this.queryText += " AND atributo_contrato_pensionista.valor IN ("+params["valores"]+")";	
	}else{
	    this.queryText += " AND atributo_contrato_servidor_valor.cod_atributo = "+params["inCodAtributo"];
        this.queryText += " AND atributo_contrato_servidor_valor.valor IN ("+params["valores"]+")";
	}
}

if(params["stTipoFiltro"] == "reg_sub_fun_esp"){
        this.queryText += " AND contrato_servidor_funcao.cod_cargo IN ("+params["codigos"]+")";
        if(params["codigos2"] != ""){
            this.queryText += " AND contrato_servidor_especialidade_funcao.cod_especialidade IN ("+params["codigos2"]+")";
        }
}

if(params["inCodPadrao"] != ""){
	if(params["boPensionista"] == true){
    	this.queryText += " AND contrato_pensionista_padrao.cod_padrao = "+params["inCodPadrao"];
    } else {
    	this.queryText += " AND contrato_servidor_padrao.cod_padrao = "+params["inCodPadrao"];
    }
} 

this.queryText += "                  ORDER BY nom_cgm \n";	   	
this.queryText = this.queryText.replaceAll("pessoal", "pessoal" + params["stEntidade"]);
this.queryText = this.queryText.replaceAll("folhapagamento", "folhapagamento" + params["stEntidade"]);
params["query"] = this.queryText;]]></method>
            <property name="dataSource">Data Source</property>
            <xml-property name="queryText"><![CDATA[select 
from ]]></xml-property>
        </oda-data-set>
        <oda-data-set extensionID="org.eclipse.birt.report.data.oda.jdbc.JdbcSelectDataSet" name="dados_reajuste" id="1220">
            <list-property name="parameters">
                <structure>
                    <property name="name">param_1</property>
                    <property name="paramName">inCodReajuste</property>
                    <property name="nativeName"></property>
                    <property name="dataType">integer</property>
                    <property name="nativeDataType">4</property>
                    <property name="position">1</property>
                    <property name="isInput">true</property>
                    <property name="isOutput">false</property>
                </structure>
            </list-property>
            <structure name="cachedMetaData"/>
            <method name="beforeOpen"><![CDATA[this.queryText = this.queryText.replaceAll("pessoal", "pessoal" + params["stEntidade"]);
this.queryText = this.queryText.replaceAll("folhapagamento", "folhapagamento" + params["stEntidade"]);
]]></method>
            <property name="dataSource">Data Source</property>
            <xml-property name="queryText"><![CDATA[select coalesce((SELECT 'p'::varchar FROM folhapagamento.reajuste_percentual WHERE reajuste_percentual.cod_reajuste = reajuste.cod_reajuste),'v') as tipo_reajuste
     , (SELECT valor FROM folhapagamento.reajuste_percentual WHERE reajuste_percentual.cod_reajuste = reajuste.cod_reajuste) as percentual
     , (SELECT valor FROM folhapagamento.reajuste_absoluto WHERE reajuste_absoluto.cod_reajuste = reajuste.cod_reajuste) as valor
     , to_real(faixa_inicial) as faixa_inicial
     , to_real(faixa_final) as faixa_final
     , to_char(dt_reajuste, 'dd/mm/yyyy') as vigencia
from folhapagamento.reajuste
where cod_reajuste = ?]]></xml-property>
            <xml-property name="designerValues"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<model:DesignValues xmlns:design="http://www.eclipse.org/datatools/connectivity/oda/design" xmlns:model="http://www.eclipse.org/birt/report/model/adapter/odaModel">
  <Version>1.0</Version>
  <design:DataSetParameters>
    <design:parameterDefinitions>
      <design:inOutMode>In</design:inOutMode>
      <design:attributes>
        <design:name></design:name>
        <design:position>1</design:position>
        <design:nativeDataTypeCode>4</design:nativeDataTypeCode>
        <design:precision>0</design:precision>
        <design:scale>0</design:scale>
        <design:nullability>Unknown</design:nullability>
      </design:attributes>
    </design:parameterDefinitions>
  </design:DataSetParameters>
</model:DesignValues>]]></xml-property>
        </oda-data-set>
    </data-sets>
    <page-setup>
        <simple-master-page name="Simple MasterPage" id="2">
            <property name="type">a4</property>
            <property name="orientation">landscape</property>
            <property name="topMargin">0.3in</property>
            <property name="leftMargin">0.15in</property>
            <property name="bottomMargin">0.1in</property>
            <property name="rightMargin">0.22in</property>
            <page-header>
                <grid name="Cabecalho Paisagem Entidade" id="4" extends="urbem.Cabecalho Paisagem Entidade">
                    <overridden-values>
                        <ref-entry baseId="1067" id="1067"/>
                        <ref-entry baseId="1068" id="1068"/>
                        <ref-entry baseId="1069" id="1069"/>
                        <ref-entry baseId="1070" id="1070"/>
                        <ref-entry baseId="1071" id="1071"/>
                        <ref-entry baseId="1131" name="NewText6111" id="1131"/>
                        <ref-entry baseId="1073" id="1073"/>
                        <ref-entry baseId="1130" name="NewData71" id="1130"/>
                        <ref-entry baseId="1075" id="1075"/>
                        <ref-entry baseId="1076" name="NewGrid11" id="1076"/>
                        <ref-entry baseId="1077" id="1077"/>
                        <ref-entry baseId="1078" id="1078"/>
                        <ref-entry baseId="1079" id="1079"/>
                        <ref-entry baseId="1080" id="1080"/>
                        <ref-entry baseId="1081" id="1081"/>
                        <ref-entry baseId="1082" id="1082"/>
                        <ref-entry baseId="1083" id="1083"/>
                        <ref-entry baseId="1084" id="1084"/>
                        <ref-entry baseId="1085" name="NewData121211" id="1085"/>
                        <ref-entry baseId="1086" id="1086"/>
                        <ref-entry baseId="1087" name="NewData141211" id="1087"/>
                        <ref-entry baseId="1088" id="1088"/>
                        <ref-entry baseId="1089" id="1089"/>
                        <ref-entry baseId="1090" name="NewData131211" id="1090"/>
                        <ref-entry baseId="1091" id="1091"/>
                        <ref-entry baseId="1092" name="NewData15211" id="1092"/>
                        <ref-entry baseId="1093" id="1093"/>
                        <ref-entry baseId="1094" id="1094"/>
                        <ref-entry baseId="1095" name="NewData111211" id="1095"/>
                        <ref-entry baseId="1096" id="1096"/>
                        <ref-entry baseId="1097" id="1097"/>
                        <ref-entry baseId="1098" name="NewData16211" id="1098"/>
                        <ref-entry baseId="1099" id="1099"/>
                        <ref-entry baseId="1100" id="1100"/>
                        <ref-entry baseId="1101" name="NewText7211" id="1101"/>
                        <ref-entry baseId="1102" id="1102"/>
                        <ref-entry baseId="1103" name="NewText11211" id="1103"/>
                        <ref-entry baseId="1104" id="1104"/>
                        <ref-entry baseId="1105" name="NewLabel21211" id="1105"/>
                        <ref-entry baseId="1106" id="1106"/>
                        <ref-entry baseId="1107" id="1107"/>
                        <ref-entry baseId="1108" id="1108"/>
                        <ref-entry baseId="1109" id="1109"/>
                        <ref-entry baseId="1110" id="1110"/>
                        <ref-entry baseId="1111" id="1111"/>
                        <ref-entry baseId="1112" id="1112"/>
                        <ref-entry baseId="1113" id="1113"/>
                        <ref-entry baseId="1114" name="NewData61111" id="1114"/>
                        <ref-entry baseId="1115" id="1115"/>
                        <ref-entry baseId="1116" id="1116"/>
                        <ref-entry baseId="1117" name="NewData31111" id="1117"/>
                        <ref-entry baseId="1118" id="1118"/>
                        <ref-entry baseId="1119" id="1119"/>
                        <ref-entry baseId="1120" name="NewData81111" id="1120"/>
                        <ref-entry baseId="1121" id="1121"/>
                        <ref-entry baseId="1122" id="1122"/>
                        <ref-entry baseId="1123" name="NewData41111" id="1123"/>
                        <ref-entry baseId="1124" id="1124"/>
                        <ref-entry baseId="1125" id="1125"/>
                        <ref-entry baseId="1126" name="NewData51111" id="1126"/>
                        <ref-entry baseId="1127" id="1127"/>
                        <ref-entry baseId="1128" id="1128"/>
                        <ref-entry baseId="1129" name="NewLabel81211" id="1129"/>
                    </overridden-values>
                </grid>
            </page-header>
            <page-footer>
                <grid name="Rodape" id="493" extends="urbem.Rodape">
                    <overridden-values>
                        <ref-entry baseId="180" id="180"/>
                        <ref-entry baseId="181" id="181"/>
                        <ref-entry baseId="182" id="182"/>
                        <ref-entry baseId="183" name="NewText2" id="183"/>
                    </overridden-values>
                </grid>
            </page-footer>
        </simple-master-page>
    </page-setup>
    <body>
        <table id="1221">
            <property name="fontFamily">serif</property>
            <property name="fontSize">medium</property>
            <property name="fontWeight">bold</property>
            <property name="verticalAlign">middle</property>
            <property name="width">280mm</property>
            <property name="dataSet">dados_reajuste</property>
            <list-property name="boundDataColumns">
                <structure>
                    <property name="name">percentual</property>
                    <expression name="expression">dataSetRow["percentual"]</expression>
                    <property name="dataType">float</property>
                </structure>
                <structure>
                    <property name="name">faixa_inicial</property>
                    <expression name="expression">dataSetRow["faixa_inicial"]</expression>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="name">faixa_final</property>
                    <expression name="expression">dataSetRow["faixa_final"]</expression>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="name">vigencia</property>
                    <expression name="expression">dataSetRow["vigencia"]</expression>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="name">valor</property>
                    <expression name="expression">dataSetRow["valor"]</expression>
                    <property name="dataType">float</property>
                </structure>
                <structure>
                    <property name="name">tipo_reajuste</property>
                    <expression name="expression">dataSetRow["tipo_reajuste"]</expression>
                    <property name="dataType">string</property>
                </structure>
            </list-property>
            <column id="1232"/>
            <detail>
                <row id="1243">
                    <list-property name="visibility">
                        <structure>
                            <property name="format">all</property>
                            <expression name="valueExpr">if(row["tipo_reajuste"] == 'p'){
	true
}else{
	false
}</expression>
                        </structure>
                    </list-property>
                    <cell id="1244">
                        <text id="1247">
                            <property name="fontWeight">bold</property>
                            <property name="contentType">html</property>
                            <text-property name="content"><![CDATA[Reajuste por valor: <VALUE-OF format="###,##0.00">row["valor"]</VALUE-OF>]]></text-property>
                        </text>
                    </cell>
                </row>
                <row id="1224">
                    <list-property name="visibility">
                        <structure>
                            <property name="format">all</property>
                            <expression name="valueExpr">if(row["tipo_reajuste"] == 'p'){
	false
}else{
	true
}</expression>
                        </structure>
                    </list-property>
                    <cell id="1225">
                        <text id="1237">
                            <property name="fontWeight">bold</property>
                            <property name="contentType">html</property>
                            <text-property name="content"><![CDATA[Reajuste por percentual: <VALUE-OF format="###,##0.0000">row["percentual"]</VALUE-OF> %]]></text-property>
                        </text>
                    </cell>
                </row>
                <row id="1226">
                    <cell id="1227">
                        <text id="1238">
                            <property name="contentType">html</property>
                            <text-property name="content"><![CDATA[Faixas do Reajuste: <VALUE-OF>row["faixa_inicial"]</VALUE-OF> até <VALUE-OF>row["faixa_final"]</VALUE-OF>]]></text-property>
                        </text>
                    </cell>
                </row>
                <row id="1239">
                    <cell id="1240">
                        <text id="1241">
                            <property name="contentType">html</property>
                            <text-property name="content"><![CDATA[Vigência: <VALUE-OF>row["vigencia"]</VALUE-OF>]]></text-property>
                        </text>
                    </cell>
                </row>
            </detail>
        </table>
        <table id="1134">
            <property name="width">280mm</property>
            <property name="dataSet">principal</property>
            <list-property name="boundDataColumns">
                <structure>
                    <property name="name">registro</property>
                    <expression name="expression">dataSetRow["registro"]</expression>
                    <property name="dataType">any</property>
                </structure>
                <structure>
                    <property name="name">nom_cgm</property>
                    <expression name="expression">dataSetRow["nom_cgm"]</expression>
                    <property name="dataType">any</property>
                </structure>
                <structure>
                    <property name="name">valor</property>
                    <expression name="expression">dataSetRow["valor"]</expression>
                    <property name="dataType">any</property>
                </structure>
                <structure>
                    <property name="name">orgao</property>
                    <expression name="expression">dataSetRow["orgao"]</expression>
                    <property name="dataType">any</property>
                </structure>
                <structure>
                    <property name="name">total</property>
                    <expression name="expression">Total.sum(row["valor"])</expression>
                    <property name="dataType">any</property>
                </structure>
            </list-property>
            <property name="pageBreakInterval">50</property>
            <list-property name="sort">
                <structure>
                    <expression name="key">row["nom_cgm"]</expression>
                    <property name="direction">asc</property>
                </structure>
            </list-property>
            <column id="1159">
                <property name="width">20mm</property>
            </column>
            <column id="1160">
                <property name="width">100mm</property>
            </column>
            <column id="1161">
                <property name="width">110mm</property>
            </column>
            <column id="1162">
                <property name="width">20mm</property>
            </column>
            <column id="1163">
                <property name="width">20mm</property>
            </column>
            <header>
                <row id="1171">
                    <cell id="1172">
                        <property name="colSpan">5</property>
                        <property name="rowSpan">1</property>
                        <label id="1177">
                            <property name="fontFamily">serif</property>
                            <property name="fontWeight">bold</property>
                            <text-property name="text">Simulação dos valores para exclusão do  reajuste salarial</text-property>
                        </label>
                    </cell>
                </row>
                <row id="1135">
                    <cell id="1136">
                        <property name="borderTopColor">#000000</property>
                        <property name="borderTopStyle">solid</property>
                        <property name="borderTopWidth">thin</property>
                        <label id="1164">
                            <property name="fontWeight">bold</property>
                            <text-property name="text">Matrícula</text-property>
                        </label>
                    </cell>
                    <cell id="1137">
                        <property name="borderTopColor">#000000</property>
                        <property name="borderTopStyle">solid</property>
                        <property name="borderTopWidth">thin</property>
                        <label id="1165">
                            <property name="fontWeight">bold</property>
                            <text-property name="text">Nome</text-property>
                        </label>
                    </cell>
                    <cell id="1138">
                        <property name="colSpan">2</property>
                        <property name="rowSpan">1</property>
                        <property name="borderTopColor">#000000</property>
                        <property name="borderTopStyle">solid</property>
                        <property name="borderTopWidth">thin</property>
                        <label id="1166">
                            <property name="fontWeight">bold</property>
                            <text-property name="text">Lotação</text-property>
                        </label>
                    </cell>
                    <cell id="1140">
                        <property name="borderTopColor">#000000</property>
                        <property name="borderTopStyle">solid</property>
                        <property name="borderTopWidth">thin</property>
                        <label id="1167">
                            <property name="fontWeight">bold</property>
                            <property name="textAlign">right</property>
                            <text-property name="text">Valor Atual</text-property>
                        </label>
                    </cell>
                </row>
            </header>
            <detail>
                <row id="1141">
                    <cell id="1142">
                        <property name="borderBottomColor">#000000</property>
                        <property name="borderBottomStyle">solid</property>
                        <property name="borderBottomWidth">thin</property>
                        <property name="borderTopColor">#000000</property>
                        <property name="borderTopStyle">solid</property>
                        <property name="borderTopWidth">thin</property>
                        <data id="1196">
                            <property name="textAlign">left</property>
                            <property name="resultSetColumn">registro</property>
                        </data>
                    </cell>
                    <cell id="1143">
                        <property name="borderBottomColor">#000000</property>
                        <property name="borderBottomStyle">solid</property>
                        <property name="borderBottomWidth">thin</property>
                        <property name="borderTopColor">#000000</property>
                        <property name="borderTopStyle">solid</property>
                        <property name="borderTopWidth">thin</property>
                        <data id="1197">
                            <property name="resultSetColumn">nom_cgm</property>
                        </data>
                    </cell>
                    <cell id="1144">
                        <property name="colSpan">2</property>
                        <property name="rowSpan">1</property>
                        <property name="borderBottomColor">#000000</property>
                        <property name="borderBottomStyle">solid</property>
                        <property name="borderBottomWidth">thin</property>
                        <property name="borderTopColor">#000000</property>
                        <property name="borderTopStyle">solid</property>
                        <property name="borderTopWidth">thin</property>
                        <data id="1200">
                            <property name="resultSetColumn">orgao</property>
                        </data>
                    </cell>
                    <cell id="1146">
                        <property name="borderBottomColor">#000000</property>
                        <property name="borderBottomStyle">solid</property>
                        <property name="borderBottomWidth">thin</property>
                        <property name="borderTopColor">#000000</property>
                        <property name="borderTopStyle">solid</property>
                        <property name="borderTopWidth">thin</property>
                        <data id="1198">
                            <structure name="numberFormat">
                                <property name="category">Custom</property>
                                <property name="pattern">###,##0.00</property>
                            </structure>
                            <property name="textAlign">right</property>
                            <property name="resultSetColumn">valor</property>
                        </data>
                    </cell>
                </row>
            </detail>
            <footer>
                <row id="1153">
                    <cell id="1154">
                        <property name="colSpan">2</property>
                        <property name="rowSpan">1</property>
                        <property name="borderBottomColor">#000000</property>
                        <property name="borderBottomStyle">solid</property>
                        <property name="borderBottomWidth">thin</property>
                        <text id="1179">
                            <property name="fontWeight">bold</property>
                            <property name="contentType">html</property>
                            <text-property name="content"><![CDATA[Observação: <VALUE-OF>params["stObs"]</VALUE-OF>]]></text-property>
                        </text>
                    </cell>
                    <cell id="1156">
                        <property name="colSpan">2</property>
                        <property name="rowSpan">1</property>
                        <property name="borderBottomColor">#000000</property>
                        <property name="borderBottomStyle">solid</property>
                        <property name="borderBottomWidth">thin</property>
                        <label id="1178">
                            <property name="fontWeight">bold</property>
                            <property name="textAlign">center</property>
                            <text-property name="text">Total Geral</text-property>
                        </label>
                    </cell>
                    <cell id="1158">
                        <property name="borderBottomColor">#000000</property>
                        <property name="borderBottomStyle">solid</property>
                        <property name="borderBottomWidth">thin</property>
                        <data id="1201">
                            <property name="fontWeight">bold</property>
                            <structure name="numberFormat">
                                <property name="category">Custom</property>
                                <property name="pattern">###,##0.00</property>
                            </structure>
                            <property name="textAlign">right</property>
                            <property name="resultSetColumn">total</property>
                        </data>
                    </cell>
                </row>
            </footer>
        </table>
    </body>
    <list-property name="images">
        <structure>
            <property name="name">2591.gif</property>
            <property name="data">
                R0lGODlhUABQAOUAAQAAABIOBBkVByQdCSsiBzMoCzwwDDUsEj0yEUk6D1hHFmRODWhQCndcDWNPFGdS
                F3ZeFnphGVlLIWtaJXpjIntnMYpqDpt3D41uE45xHJd2GaF8EI10LLCKGJ2CMrGPL8ebGtmmE+2zCuKu
                Fu62FfC6HsadKMylMuy6KPG9JuW4N/PALvTDN56GQbSWQ8imRtKuRdq1R8qrUtq4VeS8R+vCSvfKSenD
                WffNVPrRW+zIYvvVZ/7ZcP///wAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh+QQBFAA/ACwAAAAAUABQ
                AAUG/sCfcEgsGo/IpHLJbDqf0Kh0Sq1Oedisdsvter/grXRHLpvP6LR6zV4/2/C4fL5r0u/4+zLP77OT
                fjsuEgcHEi2BfEh9NwgAj5ADMol6RowDkJmPk5RzlnwSmpoDnZ5FfDOioi6lcZ85O7CxsLRkObUcqpoS
                sb21v77BwMO+RsTHvRO6mQfCzrA3M8/TwEW0tDi+19o7ysuPCLex2eI55LAvjwMJExwuM+ez8uW3RLf3
                +Pn6OR7fjxP7AqbTta6di4D37CFcmOOGPwAHGd4b+BDHQoUS9d24QeFbgowTHz66cXEIyHwcAgh4kUAX
                AZISLeKg6A9mQCIyzenMyRNH/ihIHjruuoGD586jFml+i4F0J86iUKNKLfoz0wQaQdvFmMp1qtJvHLri
                eCpWai5VL8qqhfr1m4uuZNfGWPZh7dq2ogQoUwB3iN2ijnSF/Sv2hD8BHG7MBdBXCA4bNh5LjkwZxweP
                kx9X3py5cg0YMULTqKEA0gHKNg4A+ABZ82MiqG18MEADsm0bBPy13n27t2/ek70BKKDZhjIOmyPDto2j
                o4Lel/2ZKP67um0aHLJr56D6EeLsJ/rxjW1juW2hNW4XeEjBunvbhkUC4GCYwG/zkIWyhhzfn/337vX3
                EAc0PHLfEL0JhRxkD8j3QW3VxXDCBx5wMIECCRTAn3wA/pz2CIS34WeDUM9BJgCH3gkgwAAr+qPAAy1x
                mAAmJ/gmolAIQBadPwGg6KMoPT6yX4gI3ibUAAyKlB0EGGLCIQUcUDAAAlRWaaWVHOQGgAc2FnmedyaK
                xNoHFFAAwQMPOPAimmy2iSYEZcYp55xyftDggkQK0VsEkNgg4DesCfXjj2UC0F5vsLGgY2AA2HDWQ6zx
                OSihuTwAmaKQEYGpDZI+okJpYrJAJgURlBlBYAiUSqqprK7qaqknAvAAqx/k8tymLGhqAwssCAqAClpC
                yquivO4qVAS7EqtssswWy4KWJzgrKgAKSFveEMNymokKHH5gLa+SUiBttsOOyyu0/+VOm4CyvGo6bKcA
                /Alouu8+EgG9+OKLbrmXFUCvu+BmsqOw+Ep6b74In/tItOWaMNy/2NYLycD+RPDBxRefcIIKBiec8L7D
                1gexEOXyaUAEEFD8YwYde5wvyLwaNsDIP5QLAQAHq+wjy/a6/PLC6RomAM0l48yrw5M+wrPRPtMLMwtC
                E13vwcAGOejSBzdd7tMoABAAzStMHXbYGBhg9tlop21AAbECgHXYCMNdbtjQwh121wCAvcLeN0eQAgsK
                ECD44IQXTsAJezeotMF/p7BC44+z8PfelIedQt17s7AC3pX/TYTje/NZAAQRtC2SCYlDksHNAEDQuOSw
                vw565P6Oa4l65ZxbLvnnlMM7nJvAt4n4CooDgAHjjyfv+PKVJ/+47c2n8Mjey6dAxOYppPCBAgqgnHL2
                4F9OQAfhl1/86o+47jgKm7fP/vvub257+dIDEP7mvGf/OP3Jo6DBIxpgH/OWdz7WQUB5CByg8mr3CNQN
                8BHw2xsRUKA/+oVPA+tQWvYoWMEUOAASGGCd37BnwRKiYH7lg2D4UJC/Eq6gAwQYQAc68IgEkE+BKVgA
                CA3YwRJaEIXVUyH4VvC5FHBwg9nrANsCmALWtQ58FOSgDh8RwvRB0YhYROIKs6clEFyxfig4IguHUL4j
                puABGAhj9pyoPvpN0Xg89KEWxf44v/1lT4j7K6IWfcjGEr6xik/0oRnL18UUlICDeEPkIfVoSPqVoJFN
                hEQby/fHBlixhI/0YSEb+chHkCB7jywBEUhwSFKW8pQoICUKLPmIBqQSlST4I+tcqcpawhKWhSyBLlPp
                yVKmgAQT1OUvDanLR5LylyVgJQAaUMxmoqCSrWymNKfZTBJ0kQQoKCYJPPlJbIpyCNosZTdrSUplMpOa
                b7QAK89JzXbu8prS7OUrgTkEU1YTmx1oQAMgoE8FDGAABVCAPvXZAVNCc5nuTGgJ4NlMbmpzlCSIqEQl
                qkxIJCABVmulRNO5zol69KMeveZES8DNiUIUpCTI50AbYP2BiF5gpQ0oaEQ5qlGU2jSiIp1oSSVaBJuO
                4KIjiGgILhqCiP40AUGN6AYWwAAGzJCgN72pOhtQVI/ulJ4n/egFHnEBl3LVqwDoalTH+tESkNWjRrBp
                CARX1bUSoK1sPatc52rSntL1rnjFa1rnKoK8+lWuR+irYEkw2MJG1LCDJaxiE9tXxTq2sZA9rGQfO9m+
                ImGxmDUsZRGb2c5y9rOezWwSBEtawpJWBKVFrWlXq9rWnta0r0VtbF0b2yXI9ra4hS1ud8tb2cL2t74N
                Lm2BK4Im9Pa4yE2ucpcr2ycw97nQjS5qpSDd6lq3uVYQwnW3y9vseve74A2veK0AACH5BAEPAD8ALAIA
                BgBMAEgABQb+wJ9wSCwafzrdcclsOp9QYqUSrVqvy5vsdgMAuNudGEsuG3UHr/p30InfzZvSTDfeBGvB
                7c1nUqh1gUIzAV5CAjN8cERaXF5gN4JDODk/lZeWmZWWOgOGQwR7OTujpZk3aWpeBziarpiwrz+tmUSj
                Rq07NzM4kT83ODOipMSlO714aoikgbSUzLSWzEKXxH/FpaXPmzPJXoiWra2m1NPSm+eztJXMt5WUkzk5
                XPLypPX2pwSqXqHRR+ioFUH3758TfAgRMuLV5UswX1A+GBQ3aZYQgxYpistBqSPHjx0tEqFAgQ7Gi7hE
                LkmIj9IHCQcIKPAQiRYXdSrN4NjJkyf+SnE+d3LsSDRYKlUDXgDdiCWoRlshL4K8JLRqRxre+AF4QSSq
                SY5Ne4rdqUArUkmCxu68EUMIDLP8PgjiesRGFLE0OCAQsooDXFUK6jxgYsMuFJ42JhTxUmDCXzUHihQ2
                /CQa5SGU7Wr+sXmyjRMCjKxy/BjA3s44CjcpwLmuEMOXD7SVbEPuEgAH/JYe7BrzD95dJbce/npJYRNN
                TNMoDcC2oM1WbMQIkDwwhccJ0JYpvDd5yR8J4A6gob3K9x81OECBMPs6PwXOIQghgIW1GRrUseDJ30RB
                4Do1oCcgEQa8dh4TAJSnoBA18IdgggsWUWATARqRn3pPABBaBBH+fPdfhEuwwMIQB9owoRMAGBABiEWs
                eISIlJ3IwglRAKDAgSwacVkNIhqBYYYrrvjdeQYMKYSRPyCJ45EuCjGiiCP+EKV8RHyIIoZRjthklk52
                KaWXURYRZQcvDhGmECcMUKNcXCYp5ptEnPnEXmGqoMIQVGIBAI1C3CmJmkycqB2ERnyXp5+I9qnoD34K
                gRyjQjiXKBF5XuEgmT+gEAigVzQqRJOCLImFp4c0AeqCpKb6BKlFaJpjhA5m6ioK56HgqoK3DpFrpkJw
                yisRAKzwZq6aygmFoGJqqqmwKyjLgrDKCiGso0Kg8OwQKzTbrK2uutjsFSak8IMDSyyb6bf/2Wa7q7WA
                Pvprl0/aWq0QKlZaBQrkDuFiBCho62+62VabrhHREtHvwbfae0UKKSywhLb9prCCxBT/IK64BQ8h7rsM
                Kzsxxph+GvIT8ub7aasMp6zyygwTLK+u0GIsb8ZCXPzDBkJkkIKyKNhsMgYGWyy0zUQLbTGgIBStccq3
                7uzEiZpuLOsPDhshn8zcZq31y7rSXO3MTr9bMxO27mwzERkYgTGv0bYtNghdlxu00T/QBzQUuzag9tAa
                F7F20H9brKzTxA7RQAklCKG34gXvisXGUqeAdM9s6yo0CognLm7iQnBu+Oee/xC64qQzIfXcQ5Qg9egW
                l0CC6Ilnnjmv/okv/oPemWNewq5UHi56551vDvzvu8b+e+eqa7o74pnuDjzzRkAf++i2M2/99LBnD/3w
                3OueOAmv604E4uK3KsTr52tXAqeYHyH7D+Cfjz768DMR/xD0CzL66/kjP3/896Of7ZoAPgYsAXwITKAC
                F1gEBRIBgWUg1KsOGIgBTtBX5RlBEUIgBA4K4QIGnCARNCgEEoowCv07oQqfIIIjjKCFRIBhDGf4AxPW
                QYM2NAIJSSgCEeDQhz+AYQ+DOIQWCpGIRjRiGY44xCYosYhQFIIISGBCGQaRBD6cYg+xiEUkJjGIX2yi
                FkPQRSLWsIUvNKMNq4jFF3ZRiG0MYhqzYdhGK3IRf1PEIxe1KMcSIvGKWTzCEc0IRCkakpCHHKQMFxlF
                Ir6OkRpk5BJyWAQrMsGEHvTgDzQpAg92UoqebKQkV0gHSp7QlIJAJSnJoMkFafKVQ4AlEzLZwVpu8git
                ZAIAIfkEAQUAPwAsAgAGAEwASAAFBv7An3BILBpnu51xyWw6n9CmTnBTRq/Y7HMmEAAEA2RSSy5Dd5wh
                Jzm+7mbmOHNGGPwGB3H2RpX7iTs6A1VsZ28DAj9gSH9FSo8/kJCRbGJsSi4SBwQKLTiRlGhqY5Kgpaem
                gKmPOUqtP69srW8IALa3Ai87s3R2AwSwbZGvQlZDxpNEscfEQ5+wOLs/fLfVtro5s3yEOzg3oD/RzMPD
                VlbPRZ/qQznh7e042d0K1tYD8fG7M9n8UejpQuIpe7Iu4A8Z9eq14McQ2pNEQlzkQCdwohF84cLhm/iO
                3Q8OCa1JMIhRDsWMRjpemRCy2gFYQrLBUkkGXbuYNz264xfv3f47ltaMINiYTaDAKzRiHkVpMCNHixuf
                fZroIaiRCSWL5rwyY53UrU7AqsxBoxoTFzj+NVr7w8OEBAgmAGWSIG3aRh+YqBViwwmFW0MSJACwZAAN
                u3vZ8iXS94eNx48d/3hBgLCRBBSMKKiB+BNkG4n9LWnsDKCQEwEsGwGggIbbCRxigP5M+hlpP2o9/DiM
                8hMM1UsAPKBNPLLU3lkym6lhxwkADrRxFFds5gHw4B+K025kQs6H68FjONYemboWGwWiAFDBl3aNGCc+
                DkGQ3ryT71kCDOlif7RkGzUQgcB8/bEVYBQngMeEAQWu9cAVz/1AAQQNNnGgDSwwAREUwv5ViEWGRnQH
                YQQeLlEDiCyc6BiFZtihXImLScYYiUQkgIUCMC4BohMobAgFizka0deOcuj2gwpEesgedSIKsSSQfsT3
                AwvsdQcMkSgc+QONZACXl31L/tCkjkZ0EOQTJiR5h5ZnsqXmEEgWAWWbcqwwBAtc0gkFiHYKoeYKLGQp
                hJ0r9KmnEYUayoSiP6DA6KGIEgEooI5CqgWhRDgqaAqNNpqnpU2kYGiinKaQJQqcgupECqwSYWoRrZaq
                ahEmCLqErY2igOqps8L6Q6pDoJqqrKj2WoSuv74qBK5G8GrsqboCu6urjcpq7K9CWItttqxyWsKpJVxL
                LLDZ/kDCD//hGgEsuXqWEOuxJaT7LRHnpjuEvZbOKwS+6Jrr77n3qoqvvYIKKu++/QLs76HxJjzEuQo/
                fO3EFFeMRQhCYGzxwh6OsDHFHg8R8sMkiEDvDyY/nLK5HpMQ8shlQOwEwBFDPMK5IZMgsxA7l/zDzebu
                TAbNQTMhwstEhLyyyRA3bXLKT6PMMs866xzCuVf/kPXWJWs8BNciXC0CwFEPUXbUK6M8wtMyn4u2EB6L
                8PTcKNP9thByS11E3E7ArHHaMIsM91ppm703E2sPXoTXTyytteOG4x05jIErTl3hWgt+8eFOHJ0xEYx7
                LfrXpKPMuH2ns4W5Ykv/bXbqRoQAteQGeq++uhEAADs=
</property>
        </structure>
        <structure>
            <property name="name">00029994.jpg</property>
            <property name="data">
                /9j/4AAQSkZJRgABAQEASABIAAD/4QDmRXhpZgAASUkqAAgAAAAFABIBAwABAAAAAQAAADEBAgAcAAAA
                SgAAADIBAgAUAAAAZgAAABMCAwABAAAAAQAAAGmHBAABAAAAegAAAAAAAABBQ0QgU3lzdGVtcyBEaWdp
                dGFsIEltYWdpbmcAMjAwNjowODoxNSAxNToxMzowNAAFAACQBwAEAAAAMDIyMJCSAgAEAAAAODc1AAKg
                BAABAAAAigIAAAOgBAABAAAA+QEAAAWgBAABAAAAvAAAAAAAAAACAAEAAgAEAAAAUjk4AAIABwAEAAAA
                MDEwMAAAAAAAAAAA/9sAQwAGBAUGBQQGBgUGBwcGCAoQCgoJCQoUDg8MEBcUGBgXFBYWGh0lHxobIxwW
                FiAsICMmJykqKRkfLTAtKDAlKCko/9sAQwEHBwcKCAoTCgoTKBoWGigoKCgoKCgoKCgoKCgoKCgoKCgo
                KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo/8AAEQgB+QKKAwEiAAIRAQMRAf/EABwAAAIDAQEB
                AQAAAAAAAAAAAAMEAQIFBgAHCP/EAFAQAAIBAgQDBQQHBgMFBgUDBQECAwARBBIhMQVBUQYTImFxMoGR
                oRQjQlKxwdEHYnKS4fAVM/EkQ1OCohYXNHOTwiVEVYOyVGPSNUWUo+L/xAAaAQADAQEBAQAAAAAAAAAA
                AAAAAQIDBAUG/8QAJxEBAQACAwACAgMAAwEBAQAAAQACEQMhMRJBBFETImEycYEUQpH/2gAMAwEAAhED
                EQA/AMlWFEWSy0kJN6sJNDXoXHqNLILUnO4sb16STSlJn0NStQaqu+9UDfGhFr1aPelJmYachFLQL8af
                gjvaqxpZiBbinokoeGisPOtCKMWq7NvRpYVfKLUVU0rxXQ0yJCdLg1k4pNDW5MNDWVixvSYLn8WmhrDx
                Sa10eKXesTFJqawyPq0LHlTXzoWXempl3oFt652shFaoy0c1Rqmsk5V0NIzjetNxpSGJSwvRWWfJbWl3
                pmSlm50rQhHnVha3nVWqyjQ0TrLVhtVV2qw86J1hXhUVK0ojRimYqWjpiKihnoK08KBpWZByrTwoqixb
                bwY0Fa+FXasrBbCtiDlRZs2o0FMQihINKZiWqoZhBpRAN6rGNKKBT1KHl3qhAo+Wqld6U5c7VQkWtrRW
                FCbejUEO1VtpRKowofKiG3zqt7VLEa0MtU1RlYVYN0oAbepDjzpySMW0oDnferBhQ5CNaIl5OdKSMBTE
                p3pOU70MQJmpGU01LSUp1NESstKSDenHFLyLvRMkZRSz2puQUq/OlWEFqWkph6Xfc0VBqEo8VPYXlSI3
                p/DcqZGVrYUfGtTDDasvDVqYY7UNk2nh2tT0LbVnwe+nIjS9oLQjai5tKVjaiBqhK65NUY2r2behSMLG
                iAqSPSkj3q8rb0qWu1JqrXryWobML2qY2uahJzkepsKahpWEa07CNutOJqFaehUAUvhlF6ejUaVLDVdd
                DS+UedNuNDQMtT5Kxr6VN9DVOVTbSvWpqSNoaVkph6Ey6aVMSwF6ZhT41ASmoUphuTHw0e2lamHiFqWw
                sdakKWG1ahos1j4eMWpyNQAaDCulNoBanTQBpVW2NFAFjVXAsaZJJKYaGsvFLp51ry7GszEjQ0Myw8Uu
                hrHxaitvFWArGxfOsMzu0saYb0uRcmm5tzS2XWudKiGVqrLoaOV0qoA2bbrUtRJyWtrtSmIXcjatCeMr
                7QoDwt4CNVcVNsFkyw3iUqL3JHx/0pAAF1B0ua6KOMPEpXYMWtz2/Ws0YF2xIj0Vw3hY/av7NTstTFCz
                REfFbUgbdas0JWNWGqOuYH3kflWjhkEGNRnVjF36qotqL/2dPKmMZghHhUC3MaAyKV1+1+BDUfLuZivZ
                YyqchI23qcpC35VoR4ZYoUb2klOW21nGvzFMPgsvDCVuT3t7/uWBH40bJg2Qw8N/cR51VaIo+pkPLw/j
                VUAZrXtTkxYhpc7UeKgfaIItbS1HjtRZs9h61MJyrLg2FauD5VRZNt4KtrCC9Y2DAt51t4WwFPVnaEag
                Cjx2peNtBRQaZZpORkUVQLUtEaYRhaqisbWob7GiX0obHejUQXtY0ByNaM5pV21oCZQTvVGcC9eZtKAz
                b1KTDdLvvQS+tVZ6Cz0qpgNVlNLI1FVtKURywtQHberZqG3OnKBIaWfnTD2ANLSGjW5MvMdDSL+0elNS
                m5pe3lR5IgldKXkXenGG9AkXSk1lmy21pKXen5xa/Ws+X2jRaEu1AbnR350BvOisOqi+1TuGNJL7XnTm
                H5U6W1sOa1MLWXhRWxhgABSWhLQgFNRClYraU1FUbp1NJoKnNaqA716n7GqxahyNoak0CRqNRAlbWgFq
                vKd6WJ1pagpvrRod9aCopiKk1k9CNqehFJQDrTsY2oiegrQhrPg3rQhNZsmswFqBb0pp9qW0qdRYSrpU
                qulMLFRkhFtq9cKN2c8fxqBHoafeIa0PuxajUblFj+NNwR14KOlHiXbSqDUlmsIlt604lFqRwwHurSiA
                trVWTFiUZaZUaedCQACjDaggvcqo9F0tQZDpThlptjWXiiLGtKc6GsnFtpQwWXizvWNiudamKYWNZOJr
                DP20sybc0ALvTMu9DC6VzvsypYUN16i9HK1UWtqP6VLWd0xoJUEb631R/wAqtg8KWEsLAAkXS+wfp6Gq
                R3RrX28QNaiANbLfN+huPgaxzdXdw4/I/wCrDlwvc4lAAULF2tuU22668qPFg1mYhlVFkiZo2OyOulvn
                7wfKtfi8KzxPOo1TxELuNibfC9UwSLfwyXWVIpEb7JZTe4+NiPOsXM1u6seLvVz88WYBcUCCZgxNtV8P
                92PnTPFMHJFDgQoUguUup0tfT5Uw2DZop0NzkbNGL+JSDfTyvTGD1zJo8RbPr10/LnU/PrdZxfVg4fCm
                TDGysYpjmRW+w63BX+/Kmp8MfoMYUEu8bWvpmytoLdbXrc4Tgo2cpr3YOYa6+vyB+NRjsO5xJlRQpVcv
                vLe16U/5O9R/D1u4WbBsQwiU5ZFDrpsVOo/OkMmXMbH2fzrqe0GFGDXBSpmEZkYgqfZ1I/NfhSvFMIjx
                wSgBe+zxN+63tfpW2OWwuXPj0v8AliWvEG6aUSPlVkTwNpZSAn51SPX0rQd2GRqfw+w61r4MbVkYflWx
                guVUWDbuCtataA6Vk4U6CtGFtPKqLNtBG08qMrUpGwpqGrClJuI6WphaDFa1HW1qdIUki1CY1c2saGba
                0RBkOhpdzvTEltaTlNr0TKrtS0j71Z2GtLSsNalqokegF9aq7i1LmTWoZLOo2nnRUak4mvTMWtGo3Mps
                K8wFvOvJYCpOtONysouaXdKeKb0J0FKVnNHvQjHvWiU0oZj3pMWa6aUvIu9aTx70nMtqVZZOJUVmTDWt
                bE2N6zMQNT1otCSfnQHpiSgMN96LQqIBm86dwy0kvtU/huVOSbtPC1rYbasvCCtXDjQVDQz0NNxGlIrc
                6ajNLckjqRVhVF+VWvT3LV5qXk2NGJ3oEp0o3JJWQi5oBOtEl3PSgc6qAiJvTUK2oEQ1FOQgaVDVNwU3
                GQLUolgKPG1jrRqLQgNiOlPwMKyomuaegapSlnHYWNL5h51Z20pTOKnUq8cYtR0QAVEY0oygWr17OUmX
                WgEC1OzKPfSjAUThgUaMeWtDA+FHitpTkzUA61oxbVnwWrQj2p0MzHa1G0tQo7UYWIoJlU7UGS1j1o7b
                UvLVyZOfasnGHQ1qznSsjGbGpZlkYo1lz1oYrnWZMdTXPn7XKP7RqEAtUuRUKRXO+1BQwoR0BIoxIoV9
                QOdKvH2shUvbZtx0NaMAKlbAkJqw8r61lxg3XLueXWtjAyKqKZNNxe/UgVy83l6X4ptjBGMEmXxOpUMV
                6a2PwqqwxfQ2jUFVkuB8Na0EVe7Aj5eEjqp/T8qCYy0EY1ygZlPv2rkVOi9PHHellJGZoSe7u0RCvfnq
                db/CqRKJTFLGv1qB2tbe1/D+FXLN9IZSTcqHv94Df86NhwglEkZsH1sNtdPxFIym4VVUQucitaRhIw/d
                bU/361fFYfNikUnMRH4SPta/rRXUmFGU3aNrn+E/pUIys4VtSDl9NaXy0zcdlncSw643C4aUL9V9pW3Q
                3FvhWAVMoaNtA5mYX5WKsPwb411iQXTFQtf6yMqdfhWFioRFPdjmV1K25r7Wb5EfCujjz+rl5eP7udw2
                HEyqqkKJSndXPl/Skljyv3JBWzW15mtWAtHgpR4e+wdrfvBWOvz/AOqry4dJ3w7hiC63Qncg9fMWt7q6
                MXTcGeO5bCxXQ29vKWHu3HwrSwWw9aRjVou7exAGo9L2/KtONBG7NaytoB51sOy5ktTDOBWhC21Y0MgB
                tWnh20rQOrBe7ThIpuI3rPibanYGFMpbRi2ooNLxOLUUNpTprk1QnfrUZhaqs2lEbhysNaSlYa0eVqTm
                O9DMl5H3pSSQa0SZt6TkalNaksm9BVrmvMb3ryb1KUrNw2sKciNJwCnIbUpEzEL0dUFjVYALedGNgKJw
                XUAUArejtrehnnSZkEpQ2UWpk86E1taVUpKuhrNxPOtWW1qzMTa9KZZE+t6zMQK1pwKzJ+dJtCQcb0B6
                ZcUBhqaZWQ1HirQwq0nGvirSwq02FtDCLtWrAth50lhVAsacQ1my1Mo1jTMJuaTj3p2GwFS9S1uYWp0s
                aoDU3p7lq83OlpDqelGZhalpCKNySBLY0BR4qO2pNUAsTTH6gNRY7XpuEi1Jx0zGwpwzamrodaXRqKho
                idhanInttWdGwvTCNSSJx5ND1oGcVQtpQsw6fOlqVtoNKMoqi0Rdta9MsYMopVxpTktrGlnA1oiCAKLH
                VetXQCqkzUFq0IrZaSgp6K1qdLMR2t50ZaFHb30VdqZMvNaxpaW1MnalptqIfJGbY9aycZbWtefYisfF
                86GRY2K51lz6Vq4jW9ZeI9K58/bSzpDqahWFTNvQQdTXM+1EcsLVQDMQU9oa261QnShsdaTXj7MKqvGy
                30Ovoa1SwEgVm00BPXT2vjWKkuZlLHLIp1bqPMVsxKJ4nzgAg79R5f3yrn5d6vT/ABk9LSD9263W2mVh
                796LFlEcnd3ZVTMBf40FbzYW5H1ieE+vL8KphnyuyhreHMP7/vauLLpvWx7N3pY8xEi2ym9m6XvVIlHf
                JGNmFvzqzyZohlGoaoQXaMx+2v8Ad6jdemJ3pjkkufC50A+z5/jXkAWZW5aNvvqb0tiWLKGA0vbQUzDY
                L1ut99qnfcOOqGJWWcNs1kB87fqPnSHGIxlEpXxqmUj8f786dk1Vjm8JkBP9/wB717FxGSIA2K3yv5jS
                tMWyzx603KPh8mHJTWR8O0OY7kAk/HT51VbfQMGze0vfQn+O91+Pi+NaOKjymbJsrZb9GB5/AUDiCJ3j
                4cDwF/B79/x+VdeGWy8/k49S2IjM0hQayd2isP3rb/l7qOjq8kwU+CIrc+gtVZCRHisQD4kS3z0PwvTM
                kCxQTuNFncFv4f8AX8K3G5MsfamG9lT0FamFOlZ6qqImY2uubLz3NN4dr2rox7LhzNNpo9MxNSUetNxV
                RK0IX0o6sPfScdMx1VCRLixqjtvUlhahsdDRAQ5DvSUzaGjzPvSEzb1DXLzGlJDejyNfahBb3opYOXSr
                ooohXSvItL2liw05CL0tEtOwiiCah2otqpEBajBRapnAYb1TLRytqoVpMQCKC/OmSBrQJAKVRJy7Gs6f
                nWlKNKzsTsaEqLLxG1Zk2t60p+dZ8tLVoSMg3oeW9HYXNeVaYVbIKrqK0sIopMLY07hrU9Ru04LAUygF
                KQmnoraVCal7FiGvlTcegpeMCmF21rJ7qCKprzEWNUvpVGalGqkjb0ItvUtvVL06WmqMRrRNLUByATVH
                cqUbXyphGpMNrRo2qtSZtG1pmM0kjC9MxNRqJpDR42pePWjx0JDFJ0oelWO1DuanUroksR/WirsaDHtR
                1+demWEGXY0u1MyAWNLsN6cVBzoiAVW1EjFOGZw41p+K2WkoBrTybCnSxk2oy2tQktR1GlMmVWtalpdq
                bI0peUCxohs+cC1ZGMtY1sT2sax8bbXpQyLFxPOsyetLFc6zJjXPn7XZ8/Ol6PMN6BXM+1FA51RrZTV2
                50M8+dKsqqxzgj2x862+FShkyi+p0vyYcqwnXQMOfTrTvDpj3y5TaQG4P3rVlyGy7/xsvjlpuh8MZmC6
                Ixv6a1Q2aVCpyEH+U/3+NellQPcEBWtY9Ko2hYbH8DavPz9va4zrqvcOpHsZ/F6H/WhCUo4012tUKwaN
                bm52qJQSlreIVm2x37EBNwOe3vosUhU2H3v7FDzZlUncC1rb0V18Y6nz3qdfc/8ALxI7k3F1uaaOURyZ
                tcy+Kk0IKyKNBp+NFkbxPbQ3uAOgtamOqMsdyc8eWCW+rmPKehI5/CsTHhRjMOWPijyulzq1vCT6bV0T
                ZZUaM2ItcVhzr3mOS/2dVb+IG4/CunhRy3cX5GP9b3dmOFBJYgvkmB5rc/8AtpmW4LK2qnxDyXSolRRw
                5JApYCJAw5mym3y0r0YMxSLNeyFWbp/TeukdXG4/X7hzqWMdt+7VKawqjW2tXmVe7ZwACNVBqcIbG7a+
                6ujiVO7i58NZdfc7GulNRUshvTMIra5pyLajjagx2tRARTiliLGgSPoau7aUvIKTEGRr3pSTW9MsKEVG
                tKJLJrV1UAUZgNelDIpNKQ8tyaukdXRaMiUS1RElNwpblVYk1puNKmflaNaMF0q8cdGWOqplStCZd6fM
                W9BkjFjU6gkGFLvaxpyRbXpSTnSrJSW2tZmK51py7G1ZuIF70mosifnWfNzrTxItesubc0VkuLXoijfS
                qWF/OiLtTJ1bC9Hg5UI0SK16rUWlARTkRrPhYU7EwNQkxn4aMCLUvEwtRc4rNJjXuPdVHI99RnFDdr1G
                meygmqivDnXqApbzNYUs5uTRJWFAvetApay70ZDtQQLGrqaqUzGaYhOtKpTUO4olORnamY6XjG1qaiXX
                rRqd47c6plo7Ch2HWp6i3k2o67UFPnRl2r0SwhybUBrUxJzoNqc6hFFjqlqLGKZJmIaeiHhpOCn4fZFO
                mLGKMu1CSjLtTqoNrUvLsaZ5UCWiGzsRa1Y2NtrWziNjWNjTpSaSw8X561lTEXNamL51kznU1z51snLz
                oOlFlI1oFxrXO+zKrUJt6ISNaGcvMaeVK0K8amxuCUOt6IkRXu5V/wB6coPIEb/lVMOLNmVr6bjn5EU9
                AtykYOgVDa/2stz+NZZIdXfw4LpnCO+S62DX8QJ2P+lXUsUAY73Qn8qShfwqV32F/wAPcaZVhIj2B03H
                mK4eQBvZ4XqgsxseRsG/WmMUtrOulgL+Wm9LIwFv3b3opk+o0uWS/wALVz7NXTXhYZTy02phzmSNuamx
                +NKxsMpI0tqffV4GuTf3Ul6nruOmgmbcc68wvfUeJTr7qiNh3UoOzBfxqM4ZRbdbUty1BPg1H3bilCge
                RJWPgjuzW9N/nWhPl70X9nNa3rWfKM2BxkeouwUfG9dXF+y4+fxIqC2AjU/Yh5eQ0PwNU4eoCrrdmQof
                de1NYxbYRlvlZx3Y8lvr8qDg9II5G0sSqj+/Wtfl0tzGH9g/ytMWuyg7KFFTCMrAUNjeQtc25Xo0ABcH
                rrXXwPV5/wCUaevZqIWNuYpuI2vSyDc+dMRbE10DcWplG00q42oSHSrBrinuUTTW9Cexq19DUHnalucB
                wKARTDCh5RzoiAVveoCCjECvBb1O4qogoqLVkUUaNRelTqmJKegj60OFBT8Eem1LdLTHGOlGWMDlRo4x
                baiiO9ONSZQUGRB0rRMe9LSJoaI1ZGIXes+UVsTJvWfMgpTLMkWkJ1FjWlOtr0hPbWlXY+JG9ZM+5rYx
                Q1NZM41NFZKm16upobVKtTJtcEGiJQARRkNWO5TcRpqJtaRRqYiakkWlFILVfvPOkVe3pVxJpUJAzIfe
                rA0sriiKwrNJxwRVSw60MvVGfSgIWh21qq2qu5qy86vWqN1hV1qgqy6mnJY0Wpp+BaUgGtPQ0agmoRqK
                biXWl4rU5Fb3UJG6HAtS9MSEWpfSp1VdBHtRloaWtRkFegWENxpQ7Uw4FqDanqKhFEQaeVQbVePbamSZ
                iEU9FtScNqdjtlpwRUoy7a0FCPfRltanO9pY0Ca1jTDWtS0trGiLPxGxrGxg0NbM+zVj40aGk0lgYznW
                PPua2cWN+lY+I3NY5e1MhKd+tAv8aLLzpYHU1z5e1DWOtVtoR1q2bQ0FmqLTH/YkK+MBetiK1SCZWlvm
                FrHrtaslbswlTr4h51rwsGgAbc865eZ13et+Ib6vBQysdM4XxevJhVwcpzncHXzrxjCqH3X8dKtDrEOh
                +dcmbu9Tjx0UOBnfKbfpXohZXW4sBmGu9RItgw9w91Uvcqb2b2fdXO+3R9RlNkAI1K5T8aJFIAWHMAb0
                ujZ8ub2jcGiZRvc6sVNLXct9TmzrrqdfdVYCMx08PtfGhM9lV/tHSi4ZQ9vMD4Den8WN03FwzHXOOXkK
                VhH+zC9tRmNMDV7jcXygc6iZVjdUXYZNPdW3G6Lm5DbexpBmdNQFGVfwocY7vDRpyVTced6qTYqC92Yn
                8qo73sFFgN/K9XteqNB3elYZlHIimIBltrS2+RPtDfypsOCo/mNd/H0BeRz/ANslnhYIR0uaulwn8RoE
                Z8AJtfajRkXArfF2XJkaiqdDV1NARtKuGAFVvdmka4G9VLig596qW3pxFLCqFhrQi29eBpRWGtEVarGB
                vRV30qYrIKYiS5FCiWn8PGN6JMXDx1oQIKFClOQqKXlMSNAaMiCpiQWowUWpzCAyixpSZdafa1jS0y3B
                ohLKmUVnYhRY9K1Z13rOxAFjSnZM61mYoDWtadedZeKGlJarHxHOsvEDetbEisvEW1pVlnPvVb1Z96py
                pk2m+poqNQAdTV1IqhpZtGFqPE1JoaOlUxNB6sDS6mrq1QymVaiKwtSynerBtKWoWPmqL60NTVlNHUlr
                C1WFVvXgaIrg0WMXoK01CBeiUxAtPxLoKWhUU9CBQwRYlphapGtHjF+tqJbquBY3pe1OOulL5RSjduqN
                KYjtagqKMlegWdD2saFRJNqEKZFNqslUq62olMwmnYrZR1pKG3up2PamSIyWoq2tQktRlplV42saVkpl
                tqA9rVUnyQntY9ayMWBY1sz7GsrFjwmoZHVz2MG9Y2IXU9a3MYN6x8QNTWWR3U2TONTSm1PT7mkzXNkd
                zITbGqC2YXNhejMtDK3qdWhEhBClbWu2U6c60YyhRM1w2Wxttpz9aRjzGJ2BOcDMPMqd6dyrlFxYEkVx
                /kdF7H4Qxor27vNmsd6IjBYjfrdQOVBBCqGW5UiokYAtbry6GuFy6vXxCMSMrg6Eaihi2VeoPXSvQ7ba
                2ob+GwrJfu0/ytGxsLbg3phWAEV7ZWUsfXX+lKkMkng3zWpiGz5GvouludXp6sl7Ss7eGMbtfamMNLll
                YrcqL0kubvVz+1Yf60zAoygmxzHrzvTTuWLvtjRrlya6HQfCq4lmaUZRdzXlcu6hdlvQpHDyGQtZeVul
                B0wmyG6gTlgdNlNTAo7xQR9qip42Ziut9ulDjTO4a9udaY9pZZGsWHhQJJGU7X1PXWnUS8rBtEU+L9KB
                hGWNQUFyf1puGI927G4W9712Ge3Reblw6NsRdlHMb+pq6gqDfehl10Hs21q4YMMzHKvIdfOt8VuTkxNx
                MwUedVDa0PMCx69K9mFzretS5cnuMDzqjMLVQuKGW3qmncUHeiJal1YURTpflRAkylGiF6BDrTsSipnH
                w6C9PwIKWw61oQAWFFLHiUCnIVFqBEKbiApTCNEotVraGrRAWomUa05yxWgSqKbYClZbAURZuIA1rMxQ
                0rWnAsazMQNDypMrImGhrNxIGtasw0NZuJtapaixcXbWsbEWueVbOM51i4k70Vki+pqlhV2I161W2lMn
                191QKulV50RbWNOlIkdqYjFxQEpiO1VuNUgV4VcWNV0qViutEFDS1qILX0pUtZauKqKi9ERARUBtaGWG
                teQ60RqZQ601hyLi5+NJRsL1rQdppuznBsa0OBwOLXFqI/8Aaog5jP3k6GgmCupiG3upyH5Uv2X4hh+0
                +BnSOCPD8Sg8QWMWEg6foaPCwO1A7pTU5HTUIBpaIU5AKTQtLoMtL5KeYaUvpSi0Ra1GSgJtpRUItXol
                N5+dDNuVEc6UBjRFYHerrQQaInKmRNw07H7OlIQU/HtTpIyUYbUJLWoq7UFVJtlNAk50c7GgPsacSc1r
                GsrFgWNa8oFjWVixoaGmwMYN6x8QBrW1jQNaxZxckVlmdzfLKnGppQgXNPzgWNKEAsdPOubL2vEdQnAv
                Xo9Xta1qswBIPuqEXNmB00rJy6ujjw3kRoFGfIQFaQFU+FNhA0QOVgEVX367/jQIkDzK+UkgDT0p5QGi
                mKCzIpBF64+Z3jsvX/Gw+OWmTYCOPLe5sL1CtYjTRrC1G7sGNiNiL6CgKNL9K4F03qY9n/URWy6i1rVE
                wBBt0B+NRCdbnZuVUubHe1Sdk3pilr3Zd73q8RCBC40bpVIlIdzy+1VjmEbrYEfZPmBW2B13Y5unqJK/
                iW/tWB021FXhYJAGO+utAkGbEMEuV0+FWTxZfsjax386el2y34VixWNwfaJ67VZBnKqAbcz+VULAqcvM
                2osAygsPa2B/Oo0b1XvqnMCjAmyrvUwMSWzDVtbDpahWzOIgNB4moqgiNpWNhbT97+laY9FGRtrwEF0V
                UFrgW2HqaZlxGWMKpuSb0lELkAbW8Rve1ELBRnI81HlW/H13cnN2aI+UBAxuxIudfWh95mFl8THnVWcv
                GucaC2UD8KhX8Vr+IC56LXRjlcGeH/kQsFW16gSUqZVzGxF6sr3vrrXRj5efyO3qYz1IIykjlS+bSj4M
                hnBIv4gCOoNUuiQbQoDXNufKm4wO6T43pPu8r2v7P9in0C91Fa1vZ+FStZg7SNFoLDenYNxSyJl15GmY
                bi341JkM3jT20YQBanYaTgN7Cnoha1XZpqaiFNxAUtAKchAog7jxAUUgW8qiJRartaxpTlpOdKS7GnJL
                a2pOUiiTITc6QmAsaflA3pGa1jRSWTiRqelZeJ2Na2J51k4q1jStCwsdzrCxR3rcx1taw8VzpVkmTbyq
                wN1oZ3oiWpk2gC5oiCqiipVEq6CjxihLyo60MNO1QbVY1WkyrrVl3qqbVcf2ajctFIqrNUXFCkejc9ap
                LamrK2vSlc9Fw6tNKsaC7NRuNWlw+Hv5NfYX2vPypHjkUqcDc4jSR581vKuiw8SYeFY15b+ZrF7YMBw6
                BfvSVQWuPWic/ZPFl4+8gOiwtf4iuiJH0mXL7OdrfGsn9lagYzGSfcg/91aUJzSMepo8LLktHD09Eo0p
                PDgaU/CNKPbBpf2aW06U040pf3UtS3PpsKKlBj2oy7V6BFWS1qA1GfY0EiiLw2q62qnKpG1MibgOtaEW
                1Z2HrQitbSnTMIRa9HS1vOgpR0tagqo5GgybGjkaUCS1qcSkuxrLxVrGtSc6Vk4s6Ghp3YmNtrWJiLXN
                bGNO/KsXEkXrLP2b5I4jxKx586XVR3h8jTRK3OYXRvC3l50J4rZmVvZGtcfJlp1dPFx7Nyce4Fr38NqY
                7vLmBA8LW3qrp4GIFnJo4AubNYP+n61z55ddXdwcenuPgwufLa+mnmToPxp1IlixExJ8JXTTfSkMPdps
                wFyRa1aWMyvIzLojEAelr1yLsS9Mx0jZ5jyRzR2sUNx+NKLYDXS1acqlnGgUv/8Ax1rKkWwXKNydK5cj
                y68HdCnMTpcdKJGwzKWsQnLlQYhluTprRM+ZACPIUg+55P1EgkvGxJLFuvPnV1YFNTa5pdCAtr6i4/0o
                rA964B0DDbrat8D+u7DN/tqhZLC6iyhetqvHlVPFpsqgVXOth3YsAfzqrKcx0u3LzNW6xLPbllXgsTZR
                y+ApnOY1BIsttAOfSl48qLYtpztu1XRl73vZCSBqBWetWoqxYohFHlOpbVqs1pdrsq6A9fOlndpmLE3B
                0Pn5U3ELALsu7H0pht1GSYl7KOZDr8qIsaurPMb31NUB+tsAG1tpXp5gxuzCw/u1bDq53HftSRg7knwp
                bl08qFLKZAUQAKfE3uq6jvFNgeupobKAAqsLW1sL3rXjuT8k6hIvIaDqaKpA0XU1RiALJoObMdTUKQBX
                ZjeRkG5iMBkJvqp19KYwtkIzcm1pbCEfSEuNDoacylcj77391Tk/VfEb7/U60SyMQdDoVI6Uxh4hudlY
                GhxorLH97Lb1FHie0bA77Wrnc0L0MeEXv7mY8rI4YeyCasihUPpS2fTowFqqk18wO3rWRyg3S/j7PLXw
                24XncXp+Egtpte1Y2DxFh4tba+6nsFKGO97n510cfIPTef8AkfjOPZbEG9OxWpLDkEU5Ha1b3GTUZAFS
                TpQlYVYkWojUKTnSsgGtNMRal5LUSZGYb1nzjQ1pSga1n4i1jRTY2JO9ZOKOhrUxg3rIxOxpVli43Ums
                XFW1rbxlhfrWHitSaLQs9tDrRI/lQ39o0SPamTYqLRVWqx0dBVh1K8g1o6jSqqtEUUmFo0oZojUPSoZV
                1ItUk71RTvUMameqGalnfzq8jAUpI2tLcBXz7610XZ6FFw5nvd328hWRwjhg4j3hluIALGx9o1txwQ8K
                wDM75Y41508fe6w12Qe0fE/8PwhWHXFS+GMfnWZ2iDR8L4ZE/wDmBfFfrajdnsG/FuItxXFr9UukKmh9
                r2Bnwi+TH51XRMd/+XUfswULg+LS/djUX+NMYRr2qv7Pl7vszxiUbaD/AKTU4IaCh8sc7Yw1q0oACKzs
                KNa08Oo0osWu6gilsg60221AsKNSixbUdRoaDDt50wtrV6BENxpQCNKYkGhpdqGKp2qUtVaIlqCJmCtC
                K1hWfANqfitamUzUe1GW1qDHajpa1MqpNrGlpLa0y1rUvJaxpsSc+xrJxmxrUm2N6zMXaxpNB+7Axu1Y
                mIsc3XetvGW1rFnAzab1jn1aALZ0h3IPiWjJYqcp8yKGEDSNbUMLW9atEpV5BtrmtXnc+Xur0vxePzfj
                UWxOo9beVGC+NRbS1jUxRhGOUm4W9zRI1u6+tvSuPkz35enwcevacFkZjY7W1NNzAQRoSPCFvr1A/wBK
                V4eVllOZQAB4sumnWtrERCTDKdiWDAnfYGowN23K6bJxhDTEA+FRYN+dZ8thIwOyrt7qYd8sN2JzZdQe
                tyKUxJLSMFBGb5Co5DflXG6NQsMuclV9ojf9KuwAVh9oELe/xqkSHNb2QR1qiHNJlsakNFbl3FCZs53U
                a+tVlkZGKa3OlTLKFsqW0FtRvQQ+ZiNMx8RPM1qAGrHJ3luOrWWynXm36VYEBfDc+e1BW9hm/SiMSoXK
                tgBzqV721YmjREdrAG3l5UE3NrkXPX9K8iZj4ydPdTCCNEbJox28h1paXtmOnREw8ZCKaKGFiFZlX73P
                3UPOO7CjwKBbXf0HnQsxJGtgNgKsQ6km3uPG5WMhYzmPLoKoUa5aUWtrrVLWtrZefnVic2ikKt96rEX2
                jNA69rZ/BdAGJ61Cq2XxPubE+fSpjiawu+QHTUflRGeONQqDxLzrq4j9Xm/kLrbKvofPzqFNeNj614V1
                HV5S7Y0DZXDDdda2HVO8ew+rdiw8gwrHhHjGtvOtGB2CgZT4dCKx5euy6vxgVH7nc5WNQNChvejJIMys
                RqN/Ok4ZPGGtcEc6YV0zXTYkm1ceWV63Hj0f5XYWI3Bbn1oMykkFTv8AhyqJpcwUKdtfdQhNqzMbADTW
                sOlusOtz0Rsg1vatHhzZIM3JT4vTrWJDilRmV73tp51pYecFMimwJ0tWvHlpseTj+RpunwsgK3vT8baV
                jcOIOGQg8ta0oWr08XYN89yYuGaTqtpVhqDQUN/WiqwsadNDAa0vId6MzDWgSEa0o+pSYixrOnOlPzW1
                rNmNKiy8VqdKysSAFPWtfEAXPWsrFbGlusuex25rFxG5rcx43rCxG5oHdoSL+11okQqnM0eMaVROIlMp
                QYxR4xqKshipV7C1VQCr20NDSwX3oR50eTnS7HU1mwVlqsjCozUCR96z3UFSV9KFhoXxeJWGIeJvlQ5G
                10rreznDfomG7yYWnlGv7o6VUw7tDBQR4bCpFF7K/jXOY9n49xZcBhyfokJvKw5mtDtBjDhMOuDwl2xU
                3hUDcDrWt2Y4OvDcGqkZpn8Tnqaagbm6OprDwR4XDrFEoVVGgriu1ZvxHDrf/d3+dd1iLePyrgO0rX4y
                APsxKKWPe2Md3cdjVydhuJvzabL/ANI/WowY2ovZ1e7/AGdO3OXEP/7RVcGNqa2fIFr4QCtSG1qzMJbS
                tKEiluxSK1gDS+nWjSMADSmYdRRuU3DbLR1tY0GK1qMtrV6UqrgWpdtqYltagG1jREM2q61Q2oiAUETE
                G4p+K1qRgten47ZadMzHa1GXal49qOu1MqrE6UtKba0w3sm1IzyZkI2ajeo1BlINxyrKxLDLTzSDO4vq
                APzrNxJ0I86WyNJY2N1JrGlI7weVa+K38jWPPYOOuasc30rMfGVeO0hA2B3pp4lkQyAeJiL1ZUBmcj7e
                3l50zFEFaK17WDMBz0ryOfLvRe3+PhrGSw4sQpU6jI3l1oKP9eAdRrTixmMkN7XiY+l6z0ObFPqNb2+F
                cuTehgdbjcIu2JCcmbxa8hrW1iJ1MCxxE+NVUn32+NlrB4c2SRL2ufEpA1FbGNURlSinvLnS+oIH6mr4
                j+tnyu8rJxKqJX+4tvn/AGaQnYSHMoJCL7I23pmchiH1IduXL+70tImVYA3snVgNqNbmuqsz5XGYakBr
                0LNmccifkK9iWCgAG7KCo8hVCyqu5HKpTvqW+u6ksguQDqb1IbxsT7IGgoat0G2gqjOQxu1/IHc0/wDC
                k/bMhtyd+Z6VaJu8uQbIOdKvICgudL/Grq7M1gdOlJx17MzXyfXSx5dP1omdNX8PqdqRzrYHNfzvVjIS
                POlWOu4zykNcEm+gHOrxeEXawH7xoCvkBZj4/M+zUqcxuVN/OmH3DlNpZ/Zu1vdRltbQ2Pl+FLQXY6Gy
                79BR5HCpYFQOZ8q2wNthyZmJuiSSxIDXJoep1PhX8aE00YQlMxP71VRg29dvHjovF/I5Pk+x1tyFFUDW
                gpTUADga2I351t1coba0CEkW2NaKqqtcHSgww6ZtMuxt+NNxwDu7k7ab1z83my7/AMU06fZdJAl1vqDR
                I3zANbLbWhTJHHkYnTahx4qMo8a6G9edn7q9rjBNkWVlZW67jypKViAF11okrAv5HQ2oAkBFzvcA/GsB
                23VoMYrB3KWPiWn8MXZost97/Cs3ETZWD8yPZHWmMLiwrB9iFsPWtN990a2XWcAmLK6nY6+mldBCwrnu
                DsgLrHaw0rciYV6vA/0L5v8ANA5mejYCihhY0iJN6IknWtbl3GYil5GFWZxY0CRhrSY3AlN6Sm523pty
                NaUmYWNJlZk/OsvFHQ1qTka1l4q1jR7WWDjba1hYob1u40C5rExWpNItCSC70eMaVTLY0RdqsnuKlGjI
                vQEtejJatJMwvwq19KGpFqm4sahpaklrUtLuaPId9aUlYCoyqKrvYUtK++tekk1q3DsJJxLHJh4uerN9
                1eZqNVz3AMF3z/S5lvGhtGPvNXTSYhcFgTPiGuAL0WPDwwwpHEtoohZayMj8e4qsK/8Ag4D4v3jTIP39
                xuzHDnxmLfiuNBzv/lqfsiu0jQRR5mOttKrhMOsUSgDwLtXpmzNYVlnlvoiQxIvHIQdALmvnPHGzcbmP
                TKPlX0jieWLDNGu9ta+a8QOfjeKP79qvB2Tx63fR+HAR/s6wA/4kzt//ALD/APxoeF5a0ecdz2E4BHtm
                XN/1OaTwp+FU2WXds4Y6U/C4A3rMw7aa03HQdWLGlk0pbOOtFkGhpaw6Glonq2YrZaMLWpeMjLRhtXpl
                FElrUA7GryHQ0K+lG56oNqKlB0oyWtRSzMFPR7UlDyp1LZacvuPHa1GUi1Aj2o67U6qTa1ZeMFy2X2iM
                y1osfDpv5VlcTt3WcatG2YeetLJ0bqwNurOkxA+kOWFje5HXS9K4mazr1O/vpOebxzEt7LZc34fKgHEZ
                we8ADKori/8AoBvQfxlN3sbl11t69KycQuZrruRetSez26ncdKRkQZ1OluvSpz5D2nHgb2GC92WbQxqc
                3xFqcwzDvcynL3WT8Cv4GowsQcTA6HKxtRDhyEOXLma7X625fI15vJ27vV4zWIS3ECimRk0zKwXXYcqw
                5BadmDAExXOXz5VqY1xI1/s5BfXbT8edY5ymYIp0awY+Vc77dePR3NcKUGSTMbWW1+Y/vWiTzk4NzfVm
                yLY+V/hS2GyySYnKD3eXKTfYGom1KKGAc2OVdhzrbHzVjmbd1ZiEAB3G3lpvS80gKm48QFhUyMGkYgLf
                NYkmlcQ6ZnA115UBvyS6O4E7OxYOSAWoEsik3DabConmAWysFU9KCsgUjQE8sx/Kq1+rPf7mc9kFrL0N
                6GjMwIj8MexINR31gG8JJ2Nqo8/eXJ1HUaVOtT3uYZgo1ZiQLDoK8rC3s+EeelKiS5AB15eVXMgA+9+F
                Glq6JuNyx3Hpbaid4oBsfnas8u7g3NlFQsgBsutqPjLerSRgACbW5G1FVg5tchenWkImLEHNfyrRw5jA
                tck87VeOO3VDlomY72GtqFMhJ1PxNXM4TQHQbWpOSTvCTm06CunjxuD8jlPK1l6n30SJbnw3pdBmYW39
                a0MNHoTYg9P61udXmrtrQKCGB0PKm4lUMGzBW5g/rRIog5+sGv3gfxpuLCFVYNe/Jhp8aHItOPjXyvhs
                yGwNm6irSOVzaC7agrtUuO5HLpfpSkk6lVK7MbZTuD+lcXLyd3r8HDo2yeIlzv3fIa+lLjEYZQVNyQOX
                PzFFx8SyZY4ZA5+2Qdj0pE4VxddAV9obgVGPH8u20z5HF1jOxzCQgANYHcj5UNPHOBbRmvRpYxFhFy6Z
                lU3Ita2lKYSS2LhBOpsa58uMxzP9uvj5HLjf8tjFYXLcnxAH8aWWNHmsDYE318hWnI4miQWuSdddjWez
                DvpQ3hIktYj++VdOfDvsscObXTdJ2eIVJDvmt7q3430rneDkRxW+0QL29K2YpBXZwnxwC8L8vP5cyzwa
                1WEgAOtLZ/DVDJWlzThkFjQme96CG86gsKUVnYUlO29FkkFqSmkGtLczuWmPxrOxRFjTsrDWkMQQQaKy
                xMba5rGnGtbOMFzvWTiFtegrJJt/KpRhUPbWqoavH2cwlqMpFASirVxGUivFtDQw1VZhUMqJHpGV99aL
                M/nSMr71DMqSNyG9d1wPBRcM4WqhlfG4gZ5SD7I5LS3YPsymOgxHF+JKRgofDEP+I/8ASmcWsWAjkkXV
                ifCPOp2T73/kLi+IdimDw2s0u/7orqOz/C48Dg0jUeK12NZnZXhTa43E6yvteuoZljTKN+tZ55aNEdvc
                OZh7KjTlQZgIVv8AaaiqVXM7bik5pO8csazxNvc5DHm8TEnUka183lYNxPENveVq+j44gQjX7VfNI9Zp
                mvrmY10mgrPN31bjK932b7ORHcYZD/0A/nSGF5VpdrFEcfCIP+HhlX/pQVnYUbVK92L3amG3FaESiwpH
                DCtGIaUt2bUlsFpS4pjENYUlmo3BbUNsoo42pePajpa1epZwp9qAKZlFL0p1qLHsKCPOjx2t51RSzEFO
                oPDScB2pxCLaURFQix6iihhlvQFOlxV1YFbc6Kg3WLeG/wBob1m8Q8MedbEXysOop0uGdeljY0niwCqp
                YhXI1HlU5OxrxNZFx2LYCabNqsjZj6ka/jWfFIVksT4Tob8j/W1OcXUxTxgHMVUqLH2rbfLT3VmSv/tR
                VDa9svnrXgc+aZf+30fBgOP/AGTytmAKnwPfL5WogZGBGUeM38h/eopOFlVnB2Q305imsApmKoGsXYoC
                eVxSOTdWfHreouHQK8hW9nJAvy1NUnnkWaXISFSyr0zHc/OmVZVeMspRFkD2G4B+z8arj5EMUcllaV1u
                QOX96fCjW9tmOtFiYq6HExsLurZf60kfFI7XKkXC2302p0HM7l2YWBLN6a1mTYkgyFFsCdL7hb7Vnru3
                +RqtDKFxDMQO7UFsp+V6HNmjPjNyltOp86XZiYvC2rNS8kzMcy20IC3/ABqzos12xSRdrkW50pOwa5Fg
                teLaWDWHWl2tIRmFkG1zQFOTvyrLIl7D5UJLG7C5X8as7R32zdNapI19AGJ6VoWdZ2aQgMFC2soJqudT
                cZsx5BdqEWIG4HktQZntYPlHuBNGp7mCyhbNb41HeqCcma/pal9LEu2vIW/OpXl4ltVGMnOszE+p86PA
                hNtgOlREpJuuvpTQfILneqMVs8uQPWPDDpe4951prvFjQgWB6k1nfSGIsDrUKxJ1rbHjD24uX8jfRMtI
                WOpNWjHn8qHDHmPhvetGPBzFgqxMCepFq088uNHJ3ThwrD6w5v8AlvWjh8NlYZVKtuL7GvYbByIhzrrb
                QE7edqdQrGQHVLcgreL3VK67t+PgX2LG2RRmVVA6t4h/SmXc6lC2g8QpTvEJXwH1GtUeW4OU2I6Vz8nI
                Hl6PDw6vYzFKFujXFtaWwbyQQtioh4gDkPtHMaVxUl3Bvod6amwwPZ4yx7iQLa9va51zYLlldfIfHDqy
                sNiAJLEC3zrZYRNgzKykyE6ha5+NxHIve+16b1bFy/VZY3t6GuvHZcK7tHiEw+jFVVtBresWKY/S4HvY
                EUcBkwmRyb2sL9aRhUQlixACWFulc2feS3XxusdXYRHwsNfGLj16VMxjlUsoTOCGJHS9A7PSRYhQsz2L
                rca7dbU4FKcTMZXVGtJYdeddnH/xN3NyPalo4JTCmVvaLE1oxSW3rMwfiBa1hy9KbXat3QaLyeQ3k2gs
                w2vpXi9IBvhVw+lS2STneb1VpNDrShk86gydTUqy7iPJe9LSt51LuNaXdt96BqIcraGs+d9DTUrDWkZ9
                6N1SOI1vWVibVp4gj3VmTm5NVXj7ISc6GlXlGpoa2pk2YSiKd6Ch0q43qtxXvVHbQ14mhSNSWIEz70LB
                wPjcfBho/bmcIPearM1aXYdO+7YcLTrOKlqC+u9oWw3CuHYbhGEITD4WMKfM8zXF8NwrcX4l3jg/R4zo
                Kf7TSvjuOYjDREsDJ4q3OF4JcDhVVBY21NZL8SWx9mowsMYCiq5cwZjsKkXkPkKDiZBYIuwrLW2uXlfM
                T0oBNXbahMRetcQ8k9OyQ4o1oL36m/ur53gFzsR942+Nd/x1smEc9Ec/KuL7OR97j8HHe5eaNfi4rQ/y
                per6h23sONRR/cit8/6UhhFBtTvbK0naWax0CgfM0LCIABWeXrZZB4T+GWnVXSl8OKcUeGkas2RxNI6d
                a0cUNDWfaqgttPZFGShoBaiKNK9SzqPtQqNIN6DROnTWiJtQriroRanJmoiKdSxUa1nRtYg07ERYjnRS
                RQ1l99DlktlZNHB+NWDBgPI3pfFkIqOPaGp86jN0btuM26pkmAc2DK55b++h4iYNGMpGZXDf3/fOl5ZP
                rGVdWAuttLG/6UFCBIQ98zL4fOx0rn/l71drwf1+RY/HIy06yx6XYMAPf+P51zUpC4kXBsGIAJ1AIuK6
                zFDMz63MVhrzW/6VzGNjEcucMMxYrlOpuNjXk/kG81vV/Gy1gV8LIryOLi7Ae43p+CYQ8QUIQULHL5G9
                qx75O5X2CXvfn0NaF0JhIsEzL7tbWrHA3q3zfbRxUJ7xVsc4sygfat08qFiUEmHcxkNlbQc2samaczYm
                a5yyBTDHbYG/XyApZ8qgWcMCSbDlbUmurHVxollYqZVTIPb1BA68/wAhWXJbPa+i7AHS9HxcqkxqSM1u
                epBvtWdNKQedzsDzrFHe7UQNVZZlAFvjS7XXmOtUldlLX9rzoJkZiI1S1+VtfeaeoNaiPKLlV1H40JyW
                8I08hVTIAStsx5251UvpbwjzNWGvKHvu8So2uSKET/ZqssygWJY/IUsz3HtaVZi2bmEZmuPKqFwp0oWb
                NooNqKkYuNbX8q0MP3YvLvysgznw3JpmGIZhmFz51MCAtlHtDbrWlDALDOmp61oYFDlkyYYDQLcbUZAz
                geEa7U/FCy2Hd5h6U1HFHc5VJ9Be1WAHVimWT22YuGc3ARbjex2p3D8MnZVcoAm1Mq6xxh7ANtrajiZV
                jKzGRDe6jJdfjyoUJHCPc1gcPhoLiQqLC5Baxo6PmTwyExKNwCP6Vnd7ExTOjiTdnVs+YeXSoidi4YSE
                ZbgZwRf0FSpbY4a8J98QI7i2Zb5rRrcH386usmHkU2jKEanM1gv60GBT3YdYkcrurqGyfG1GjZVhLPAj
                MdAe8UKD8b1nk7OrXEB7hSYjuiFaVs7fek0oMshJuAdr3r2MbIgZbIWbxERi1vLmaUkhOWyl9eZrk5O+
                7rwdXnUyBmUGw3rc4dCZsC6vZ45RYKf761j4SVsKySoFIvlkRtjXfdnxw/F8OVYoxGybovrrvU8QfL2f
                KrjfN+ImaGbvIkilFyDGR00+Jq/DJMBxWJ7Ww8q6GNjvXSdpMPh8PjZ0SNQ0p+yOmmp5VzkHD4YIlliF
                nPTxW612Cglxuti04rMIjpcg+z0rAxsxzSZRcHKPU/2a2cf3pXNaMgDxFG1/vWsZIXmZzYXAz6faWszj
                72zeTrVrcLaSKNJIjaRWGW1dj3YxaRMhCzr4T1I/1tXH4CIjDENlCZc5PUHb0/rXQ4Kcx4eMo31gubfi
                P76Vvg66pO+7aymM3OuY/CiIdKjDYqOZBmIVZB4idbCqkGNyje0K1fNlw8/G45b+mISCNKgNYVW9VNSt
                zNYkVGlDPOqk+dS9yrki1Cc6GoL70NjvS8mdQZOdJzHpTUpFqTlO/Sp33USE+9Zs+5rUnAsazpl1rQd1
                kg41qgQXphluaplp71VqhQB61Nt6sLCvaUbiGedAkO9GfSl5OdG4lJiPWtv9nC5u2WBI+xmf4CsGbnXR
                /sxW/aZ3/wCHh5G+VJ7q8N3e8Bw6SYzE4htWLnWtxvEcorL7PADCsebMa02YIp+9WOTvJoDQFWUhUyL7
                6QYC1HZtD1oB8tqYaKv8hMuhPKgbHamHblQG51Rv7q3uwu0zgYGY9Im2rn+xS37QcMurMPpMZsupNjf8
                q2O1zZcFMBtkA+dJ/s4TN2s4VvcTZvgpNaEPWOrtOOnveOzvlIuF0O40ouGTahcQs/GMUf37XpzDKNKy
                Xts2cw8eop5IxloGGUU6AMtKhs3FRixrPyCtXEW1pDSjci01taiLah30qVOlevZUS7GlzsaNJtS7HTyo
                qqlhV1NxSztrpf0qUbTXY0b1Gtz0bi/nRRNlKjc8vPyrNkHhYKb3GYe6oTEB8LkLeJTYE7HmPSs8uT42
                3HxfIthJkaPvlN0+16VabxRMMykWzA1kd9JAO8TxRNvzv/Wi/SVYCWKxElm8PrYisnlHpt8eBHZXnlCu
                kltUsG6XqJspkVVOqeyOlXxAjckoNCtj+9/etKSuvdoRqbHfUX/vnXHyKZbvQ4wcQgY4lZ5gF0ksw6C2
                jD8KwuKmyOQApVtD0P8Ad/jW/iZS8QnjYM6tdhffT9NPdWZjFjmglYC7SWOU9b7isOYMuyvjXHr9XP4s
                glZUW6ZiDTEJQYODnefN7rbfhSeUrHZWsA2utFgkK3C6s8JEXkSfla1ZYY7d2+eXXc9co7RMbOhYqQdB
                puKRxmL8KqjeJhkYj01/Cqz4rOxynwKT/f41mYqW7G9iP3TtWw63YZi6ZbFy2fwjwEaHnS2p8TNY7C9e
                lkzNYn2flQZJSAAp33N7H3Vmq9E8T7auJvmyJoep3pY3UlQTboPaPr0r0kgjUjQDovOlTKzXAOnPoKrH
                HcOQRswRTlsT97kKDLNbQEA/hQZZfO5oaqzm6jStccN92OfIHRWL3PgHvqyYdnOquxo+GwqMy/WH3C96
                04I4YbM0mX93Nf5CtDRYd5dslBg3W2aKwO2bSmxBaIOYgBsbbf1p+EnvFaOAKpv4SGN/1oyKrBmRFzDf
                w5ctC9VASeHEJvaNzfawuPhTSO4W2RBHf22uNausTtHI3dK0g8WYnKSPPX8RVopT3wfKzODYBSi60D9Q
                n3FhZ0t9S4c+JbHX5008U0irKhDd8MwS3Pnv+VBgjkAkL96IibkeFjf4UeCJig7kPtdtS1/PbSql6wVw
                +e18PJCB7Voyc3xNFw0KpKojRLOdXklsPxqyq7R5ZhG8vKRrtlHTarwtkYOphTJziUr8Cd/dUtYRYA+b
                uisJiY2HiJ0/dIrzyxQhCFRHJ3tv6X3PpVGfRnlxioH1ufGx9enupvCQzIDKBNIpF+9dny5bdf0o1vyN
                /u8DEuIRu+7skXtsfmDU5omkbucSz2sVtpf0WwqBcqY1hhRkzMSy52k8rXH51WQyuoyPHBhzqAi3TTz3
                vUOzqZ33KTRqjytCuU3stnzFvW/P0omFiDgsCoY6mMa291XkYFGUyDXK4jzXOvzvWhgJo8MuYQ6JcEhA
                wHreubk7NXRx+7kJ4kkEZJuCmQkbb6fP311HYfh7NPNkIsVsy3+1/fKsr6niBMsCoh6IBr7ht8K6vsTJ
                Hh8RIAFTMu9uVRwB/IDXzP8ARSD2uweEbBjK8a4iMHMGN7joa+eYe+FjnIsVeTweXW3lrXTtwpMTxLik
                vEMViMsE5jSLZTbW/XUEeVczj5gCIAoQ5s2XLnIF9Pf+Nejo2redllo0VYIoxEJGfP3lkkXXU9KSkw6x
                Km+ihFOSxA5flWrgojN4Vz5N28PlpRMVwqWUgZFyqOZub+nxqvjvss/l+7LHdJEBESlzlOugHrRFm+jh
                u7JyrvcaiiNwrEYYgPEgsbgltGBO1O4Th8gktJDmRG5EDX09KxyEe7owyEqYbiIZVa+Ytoy+W1bmFxH0
                iDMxuVBs19/L53rjzho8Fip8MLhVc6npuDWlwido3kyse7GVtPOk569qeM5MdXSqwIr3WhhhmNhZeVtq
                87AKSTYVa/q8rkxcMtN5iLHpQS16nNm5aedRS3qjVUV4gWqedeNrUvZktMBaknHWnpLWpOSiolJhv0rP
                nG9aEut6SlW96Y6rkiNTVcu9Md3UZNae5wMlVy01lobKNaFjcq4AFKyc6ccUpLzoGZIT11H7M1A4hxOX
                7mEb5muWnrrP2drbC8bl6RKvxNWdzydYrfQeAgJw9SdzTTHMSaT4SQMFEDtam7i+m1YJpaevYZtrrQDr
                ejO1wbUJrC/SicFwBQmAvoauTvyoRsK0BI/y5Xtmw+jSDqVFW/ZeubtThD9xJW0/gpftmwyZesg/CtH9
                lMebtC7kaJhpD8bCrKl67uilIbiOJb/9xq0cKKyozmxMrdXb8a2MJasGwye7QgsKPm0oMVraVc7UWe5X
                E86Qp7EbGs/MPOjTMW17aV5atYWqVG969ighSDQ9aUkO9OTbGkJOdFRAc614NYG4NVepAFtalNnVYg90
                vMpsGUhuVxvWbLiAjvl9lt9Nq08oKnp0rM4tGy2cC7Wv0J/vrXD+QZhsvS/FcFCrFxFoUeNywT2r9Kam
                kWQmWE5VYHa1iR/Q1kxFpFDaWB8UfLXoKCspw47iEsCrhgwNhXn/AMz43p/w4+lvYbHB42uLPzGb7QN6
                aSZO5n0vnUtccq53C4w/SLMRm10Ybnp7+vlTceKXM4hNo2v4W0KeVByL6yy4w8tkxZIZYldGLLmsVvuN
                6zc+HtOA1mykKd7dP0r2HnZI1izZ5MpYEne428tqpMO6VZ4ZR45M+uuYX1Na+myx+9NzuKy96yI3gZ7j
                y60k793bmwJ1vanuK/V4qaOBSdbqLcv9axMUzBjcB+vrUYidTzR7jtiS2a9rMcxApCaYm+hAbXeqSzhc
                xvr1pSWYkb3HnT9KfuKzDIQpzE0uzKAcvPc9aC0tla58P40u7k3Mmg6HnTDcnIKZXUkkkt6Uu8xbwoLC
                okYkbamiQx6HKLtzJ5Vtjietz8mauiiKIs33jWnDgyFBlGnIH9KnBjKoIkbO1gFCXJrTiEllVI88twOv
                u9fIVS/VAfbJxwyXILBVGja2+JrQXCgZSEUW1DcyP0qY2csUUoSvh0It5+Qp+GN2gus31LuUu7atY/G1
                IN1y0kiE5pHmeQDQGPMW9KJhwxgd5pZQl7WWMat8NK1hGkDSFYw6x/aA9nz1FvdUAwrhXkOJERZM5Rl/
                zP0o0/cL+rOdLLGiwEhiVsFbU+m591MLhooiPpEUgtdTHns1uuUV4YuFWMuEiliY6DxZQW5k9fSh4SOT
                HGSVWDg+EZQTm/5r8vhVBryhyaSuFjkYSJEiJrn9pvS1t/KiGKIERE9zL7RYBBlB2F+tHwmHCP8AVjDs
                WhLCRmJHyGp6UeKBIVhhwbYpnsJO7gQKGPRV5etNJDDw8UzQvI8z2VssbSMLgX18NwLeZ+dWLHEfWyS4
                aQKbBo7F7cv3RRJoYCpWbCF5we8IkkzM45ZvOi4mGRDG/wBEjikf/cL42Xy8Wt/hStDqGIQmZiHc2uzy
                KBf3nf8Aveq4posqyT5XwwtmWQBfdfnRMRDJgozHJin+kMQpjUhn/Ow871CMi4hpZk72bSwnZ5T7wDa3
                Qc7dKXc3WqYc3ciVZJViJGSOSMC3oDv8qPiMJJOGkhz92rELc5iW9Tp7qnhs80rrJG8c7p4UbOrNcdF2
                AH433p5AJ4pY8REUca/R+8AOuxY7+egvfpQm4Gy8HJhcPKI51LBm1P3W6XGlPJisHiScweFlGQDJp/CT
                TMCROplw+HzxkEsXDoNOS3H6V6bCtDCHUsyJ4mVF8PqedvM1zcmOxtscteXsDkhxN5lUMftZa18LBE8y
                vD3hb2rx6/EVi4Fu8Ry0aMqnK4K6GtnguPw+BYBAyRPsQ9r3+dcuGzI39XRl/bHr7q9pIwuGZgQJNATl
                0r5tjVP0pg8TKwGjBbAbfHnX0LjWPnmjZFhVUByqxGUH0vvXJ41UnSRi+QKLZX8Nm6A13GS9tw5YmtWr
                2NOHjxqfSheN12v58uddviMFw2OObEzR91Et2RQNf71r5nhIwFKZ7katbTLb+tdQmLfE8MwwxLByZAkY
                LeInma6+Pk60lzuAdlut2ebFYaLEzuFRwMkKa2151tHsfhZIu+mxR7ywJpHthioOH8O4XD9OgwMc2ITD
                fSGPhj3JZvcD7643ivaTiHDeJr3HbLhuKwcjER97he8t/wCYqap/rWnw+RvQ0OeOKC272y7GwQMnEcCo
                PhMctjmBW1g3ka+bKr4eTKwIscx866zs/wBvji8XKSsSPG3dYqKN88MiX/zEvypTtlhYcLxSVY1HcyKJ
                Isu5B5f351xc5s3ru7uF1rT0yvDsSDGAczOeVNix8Ta9K56CYxSZWYhr5tN/StuFg0anUi1ZcWSmmw/P
                4w1mV2bWvBr14i9eA9a0vN1TmGtDZtDUtQiaYyKkjb0q9HfW9AfnTrJZhe9UZL0wVr2QUlrJEx1QprTz
                J0oLJv0qRiVCUN1GtOFRal5FFUO4kJRSM1ta0JhvWfPzqyos+feuy7BWTs7xhubyRpXGTc67fsWuXspO
                f+JigPgKo6Z5f8W7bAwlcJHbpRWUgaUXD2ECDnapcjbnWTtl/ko7WuKGpzNYUeRQeetDKi56UdBqSa7J
                eUgEAUEnptRmS5NBKgE1Zqf0FxPbB7yRryMhNdD+yhbY7iEn3MMB8WFcv2qa+KhHK7Guu/ZeMmF4zL0j
                Rf8A8j+VXN8J7CasT1N62cLWLgdhW1h9hWDc+VpQ2sOtWe1jQYTV2aw86KJbEHQ1nlhem8Swyms7MKdR
                dGBpVwNKhQLVYDSvXogTDQ0hKBWjNsaRn2oaiTYa17QV57XNRoRa+lJQrMVroNrXt0tehYpRNh0iNjfQ
                MOnOoSQo45C+utqrIyPKAzZGzZrgflXNzZGurs4MXfdhveOQ3bqBpqG2saFiH1yyrlI052p3icJByeFi
                TcC25H50ph5Y2QDEG6MbZg2vvHlXk5Y96vYxy6GWxcSPhRLHcOp18j60KPiGcgzZjMp9v7S/rV51AGZG
                Ycs35UnJGXBaxUD2lvr6ipMO9yyzQ02ucSDmxCaAqobxaX/StCOSOLAEyNctaOwGxGpuPz8q5PCTNHI0
                cllFtM3I09FikOaDEACQMTfq1q3wdWOWm9i5g0rPIDmkzHzy8qwsYyoQL6lQSPWnsbiAylrg5uS61kyu
                CS1wT6UOvKfXcrL7Qv4RvYUo3ic/OjysNbWF6TmcAZVOnM1JW+basjgMANTQZpB61SR9wN+ZqsaZvSt8
                cftuXPk+iPhYWkYMRck5R51qRQCFjGgPf7abL5a0sgMYjCXz33Jp3Dx5UEhCBVBBzfn51SlAM5h4Fje0
                hk71hcMtgcvXy/E0SUjvkijAjjA8Wbp7q9AWcnugfHqzt4c2u9+Q/SncNhVhvPoVUaZV9nXT0qfXqvwp
                SKMBURcpUXkULfL/AHtV2lklSKTDh+/PhCKAAoXz+ZqkbSYjEOC0kikgm7hVTXoPK9aaQxkO+IRXUeFY
                89ifIDkvrvT3+o19ssheWeN8TF9SPYsxbXrry86amw5SaT6t2kkGYSBbleXs0OPGRks7LG6Rx+GNZO7V
                z6701ie9EYJWPD4YALIGJK21vcbn1O9WBQq2c2BC3WY/VpZ/rMo70j00tetBI4nd2SIiItZTPmBN9rBf
                woICrDFJeMB3vGCe7Cr6nn+FAxGMiUOkc0mbNkv7KBjttqdOu9UaOrN37NvibSSDDrFKIowCrKVRH/f3
                156UTBNjsdh7YN2dS2Vp+4DMzcwq6eHza1Y7cP4hiHLYmJ1gR+7TP4EUWv7G5863cLEpwbmPEKiZAWPd
                +GbXRbEWA9LmnpfZb15UTDY7KsGMxDyePMwyqhe3I5fZ/GmoYRCSI74eQyWeR4x4F+7fQe43oaYqOSBX
                wazRxd53ayM2Xxc8hsSB6a1WbiBlWKOJwylysMuzREHXcb9TUp31a4vXtL4WOBpMmd5zIe9lVdfex+1+
                FUihzENOpMNsqhm0A0+Pmf8ASqQxyrDmw697KzWXvCHJBO4Xnc/qTR5WGcxGZHZGyhIlub89dutzyqEt
                B1REYcTKYmkjREZizBWJ8hppc9N+vStLDTQLEEizpNEmaQxNls3LM3kOlZbYYKyFGdj/AJaQi+VRzLN+
                mtXwzxspaP61o20XILBmNgco0uOQ5bm5NSr4T0L3bcImljixExlSHLcd41zl/wCbb0o8uKcRFooCy6/W
                Fvab0pLEu0mIkikkByqplLm+w0zkb+SjT1otg0bmMBoQLKzggm3O3JR0rLIfq0NeNlY6eaGaKOaWJpGt
                4b5zv5CrR4qGOXLiA8aSN9X38ngH+tTjoAh+smSSRmI+rFrdByuSawZ5BPIWdQQcwXwlgdbb8ufwrDXf
                Vp51dK3ECsDq8bFkBtmGUC+ntNXN4zFSNiXUIrA7qoNifWixTDEhn75xNDZSFQjNSUwjE/1urZtbMSet
                ulai61Z5B7N8PaES/VCzkWVL6G5p/gfFhBxPh0EoKhZw7MLm2pF6yBhUbF9yTGiBSSXezM1KcSnMeJVm
                sEYhhYnQDatceREPqxcDS30jtpw5+0vY2XA4cA8Qwk/fx3Is5H2fUqa+AusuZlbMrochVzZl6gjlX1/B
                celKI8ehYBZI9BrvcUHjEfAeO5ZuJQomLbTv47pL/wA52b31t/IePVi8fy7LhOxeHY8XYoSyhMpt9omv
                oPbfHRHG4dUKZ4oAjPzv0rI4VgsLw/EkxswRh7bWBOu9J8YxXf4xzGo7pfvG9Y8uXSF0cJ8QojK6uBqp
                za1vYKTNhhblpWFho8wbMALjWtnhiWgNjcVhxv8Aar8rHfEzykGrcjVEG9EFdGrx9Q3GhoDfOjvQG50a
                1CQWNB50V+dB505lYCpK1CtUkis1qKhtagvbWiOd6XZhegJ6vPa1Ky0wSKDLa1WRqzsRWdPzrQn51nz7
                GtCos6bc133ZNMvZXBjm+JZvwr5/Pua+j9mlC8A4On3mdj8aqWfn/wDLtE9gDTaocZTV0sBVHbMax8kv
                cBtzehki5q7bmhnc0PdTv/yG9rHrS76AmjPuetLzWEbm9vCaoNR3fPu0TA46MdFJ+ddv+zxRH2Z4zKdy
                wXXyQ/rXCcbN+JjoEFd92PHd9hsc/N52H/Soq2rJ6j4GwArXw5GlY2ENq18KfjWNytoR7V5zoaiO1ek2
                pU6s/EtvSN/Wm8TbWkqdeJ1datrGraUNKuDXsWRCmtakZedPTbGkZdqGsk3G9Vy8zVnAvYb0KSwW/TpW
                fI6Lbj7YOI+0rWDfZY7VnYqRsqFrKUNiC23vrRlcqbC7HQgH+9qSkVWmYwvutxl+90sa8vne+r2vxsTX
                clNinZbF45QvUEN8etAaSFvHExikuLxyLdSavitJpYX7sZ7ML30PlzFZ+IEkZyyKb3zIetq5Pkt1OJ/1
                HzI0RbNlYDYbf6UGSZ2uhI5ezQZJ8oMq2v8AaFrX91LtISqyRn3Cqxdtll0aGrj1uCy/5gtdTupoMuJL
                he8FntuPzq8jqUFr5ytgSdB5VmzuV02A0rT/AKsRPv2vNMTHcbjSkppCBvr51Mz5bA6t50q7a+I7Uzur
                zdYvZSAbedJzSaWGgGlWke4velGOZworTDGw5M9FKKXJPKtfCwKsQzDU86XwkA08NyL8tK1o18QBsSV0
                v9kVrl0aLDEV2yqXzAgeNTlRQKcypkVGZ3DaM/InoKMsX1sbHR7XA5WvzqYonlmjazkpfKOlQNep/CYa
                MuDKFU8xf2f68rcqLNJJOiQqCkdwscYJsP69TQ2dY4QIgGK+FWte/U/GmlwUlwkpjV1W1joDm50f4Qf7
                XjIijnTIHQjLGUXKGfTX0HlVComxEcJIELXJVGze/wCNXSREzSS/WInhjjVrZhbYHYDzonDm7pZZlfdl
                buwv1dlubX3Cj53o39TpwojWUju43WHwx5Rdsv3r7D1qcwdmllyRIq52OW7W0tysB6b1BgkWWabERLEm
                Y+NtdeenO+tHdXkk7xpBEWbKzu3hTlmbmTbb41XaU7BhwqsiZ2QtLGLNIR4rX0CrTqRRxTuI8PZtfrNC
                qXF/5j1pJJGEjIAkLS3jzqpC5FtfQb8udN4kLIjYbKViDABrWGe2Ylr35chWmOiyy7qy4vDROkcQZZEW
                0gNnuvr0Jo0LqQmKlnLz+20kbXy30CJ+7y61WJBII4VijzRr3x8QA00UZbcvOrvhe9Cy4ph3kClz3i3c
                jpm/p5VqWcnxHEPinXDYWWLDxTN3LaqbaC5AF7N8h53prhGFTCkow7+NVMhmcXdQNARf3DXTXaqYfDs3
                EImjLsgUPaOK1j/DzOhsNaLhQ2MGUSJh1ma/dQj6zJfnvY6nU7/Ckm+5jqtiOJJBgjIlpMXMxVVRiVVf
                vW3Y7CowOBdIicV7UgJJtsOnvNTHAkMn1IBYXMvj+wbnLfmNPT1qYZHmw7Q2SGbux3zE+yp+wvx+ArNO
                +7fF2S2IaOZ1GDOaFjZmzGxtvY+Z5+/pRcFNg8Ph+9xDJHEgaRSG0JP2reu1excSRQqCoaNfqYxfU21Z
                vwHvrIkJkvIz5ndlUZBdRy8PU8hUZmuq8F9ug4ViXxsccOHhbDRj/NGbxSkm5Lc76AU/iMeZsQYMNdsO
                obvAZLLpoAPU2rFwUncwFGFjlEIC6m7Hrz9eepo4MSAQocgfKykbKliR8vF/zVim7Q2UY6HJCkynxEjK
                yqLe1a4HL1rLxX0ZRiMLG1lhXWRny53/AKeVb0bF5kzeJUvJ4h7Krpf3dOprE4xg48Nie/jGWRo8z5je
                xtm16AXHvNc6d6thNblhHFmFw6lV7tszdBc26+vU1AklhKtGkjtY+K4so51ODIxUEbGRyJJLMW9q53a3
                I+XK9CxOHljhEkTF1RGW6/Z5a/KhdOqd9biYSZN2Gab7La386Bi2jkcNKMzX9APQUYsArSM5sqhe7Y+z
                p5epoU8gLRmOwbLqAMo10qx33Zp1qGhVCMkhsFsAFzWv61WZVKMc5Rl08elhz0o63VRYqB63uOV6Vbvp
                8yxoDnuAP0qvnvooMdeycOIa4NxppYD86IrSAlvEDa9raU9wrgsshQyRMVJy6bX/AFrXPCEwrd1KxVgc
                2u5HpvTcXIkZGLZOCvIAtw1q3uHAWYCh4fCrGl44me32jHT2FgkjDZ00/itWJ1kDdHMmXC6rgfGrW02o
                iKD09xrxWusbxSAw3pZhTb6elBcA3ojUm4oWXXnTbKNaAQKSz1DIsKEWtRZCKVdqzTuoKXa9BJr2bWq3
                qw6hpFCmIsasWAvegTNoaoJElOd6zZzvT07b1nz861DqskJudfSuzyGPC8IVtu5zD4180m3r6zwmLPNw
                +PbJhU/Ck9DLLbrV0QcFd9aozAbb1UxEX1qGjbc1lvuQae6vtGy1BjN7k2FS91vbTShknKQTp0qd77nv
                TCkNzSmLa0E1vummL6HpSXENMJL1tWh5qZre759xI5uKyDmAK+i8BHd/s+Te8kzn/rA/Kvm+LObiU1vv
                Wr6Tg/quwXDF++c3xdjVvQzy8owljWthza1Y+EYVpwMBWC3MlpxMKmQixpZHFeeQW3pS1LYoi9I0ziH1
                NJZqusLslt6VcWoa7VZdq9ewIc21Iy7Gn5tqQkPI70VhKuRc33qrKrKQ48J00NXcanrUrYb2sedRl2at
                uN07+7Hxjyxpk1cK1wcu1Zry52bI+RtCDvXR4pQ0Z1AH3wt7VzfEIVVyUY5r+IHb1FeP+Ri4vt7n42Rk
                ed3nxaOAmNXwjZhoV9DQsSGaXu2ZZUuArBLhuhI60FcQYiY38SFbW/Sq5okAZJZEFtRa9cw7bozx/Uri
                YmSfNEQUOmhzD3GkZkIVmiPsm7JatSeT6QADHnfkVbU/GkJiyL9aGIGgDLt5XrXEHu58lHVnOWUDJYW0
                PrSeIkOY335m1OT2u1tL+dZsxAtp/Wnj97lmeMNmuBel3Op60aQ5dtiKWY+0a0CzzYUzWU2qcFGCQx3v
                Q38bhb03h1DEWuF9a3xNFyZu20sAgJDMfq75VvzrUw6lgcgtn11+6KTwYEZTQGw291aGGAADNmva9utJ
                Nu6jo1HgHfANHGQPs/69KPcLJmchGtlsNsor2HyKqtqSVDE9F6e+mlCENmjZXLe1a5uOVCbqIcMSviQG
                uMMgy5fveVHmknyushTvDorN0/u1eiZ1wocjPI7ZVBb2Ftv5Cl376WbKgDrF7TfetsKA11JfuDJA4iZ3
                ZgDrIwbl9lQOWlPSEQJhw8b5pG8CbMzALp869hsK30URlmLSHvGT90bfn8KpxLxY+RizFyVEbA6Ntr8q
                AhYyJZu9d1QrJ3emo0Bv/wBVVdfpGIUqzvGJMicsxbwlvXkP6UwvchsPDEveTFu9dpG8JXn8qXTGorTz
                zSL30KZ7Lu92OVV5DUj0tTls3MJIxxcSsBFHyjXRVNzcD3LRMcrdw18whD2+sW4AC323a9tazYLqY5J2
                RdDJEAucsdTfzNMSYgJh0KF80qd2GZ7HzH4U/lQ4x8K8f0SUskqTzRZmBGQqvp5/nR4GGSMx908aWWNY
                1tGp9eYvS2GxEYwIJKXkiVWFrnLtb5UpjMTH9IiBmWN4wEGZ/CbcwNhUuSNRianGkfEBI45W7nmT4c2a
                45a5flWpi4GLz4Ve6w0YYLNc2ZjqTY765lWwpGLHMznEMojw6IO6zFdcvsnTnSMuKxWPV55iIULL3ZLD
                6vXVjbUtyA2+FbceYndlnij1aEr9zNGUEryv9Xba37gHTQDTktEhMCxxl7RF2bwE3JJ9pvcug9TSiqq4
                5TD9UqxjDxBxqjsWzH4CipMhQyRKHyDu1+6umWhPuvB+qMTG00dmGQmFIwbeIFmu7etjb4VQ4Xugqi6F
                VyowPsg66eZ6/CiwrHNIhfPZle46D7Xyy/E9KekAbO4RUZAZly+h19wFqyyOttvj26LOxDJBJd7GRPaC
                /ac8rfw6UNMQqQtMxsrX8O52sPxPwoWIkEWGBchY1HeFnOpvt8fwHnWfiHlYEIjMqqAubTW19vfesE77
                t/rq6jCYqIQLO7KDHGyyNlv4ntp6/wBaFxlMNJw+aNTnnlvHI7MPF4mYn+b8K42TESmEKZTkBLb38W1/
                d+dO4abLiLSB1kS2YNubDascxxemY/I7o+swfEFzreL2SANCRoT8a3XxCnC50IuRbe2YefntQ5ImnwWS
                UhyCHDAbG2oP98qz8dLli+jqdNyRUg59lL/TplGmjzv3KmxY6E3r2Z3BZsq33zVWKEKBbc6Upi8K7qSx
                bMNq2OIfbFzbUiwvegXfMRvbWt3hmBw8LRtLAFyqQMQ2iqaxOz+IyRFSfGp8WutdLg8UmHlAYK5Ye1vT
                cfiieS3stZT9DYsqyOAuseX2vMVXGzPJhDD9IkCPoJAtyLbC9JY7GZ0vYkxyFu8c6EsLaeQrLws4XGyo
                5ILN3ntc+fzrVfqzD7tTBQxlisqZyG0cyZh625VoYzDrHh4mCoLHZbUlh8bw1sSF76P6Qq5mVT4gK0JZ
                kbDiCMh1Pi81rJwtfn/VH9SWRbkMoB9KgoNbUzIu5oTWtTG82TlXelyKdcDWgsgtV/USrbUu1MyKLUq/
                PpSnLTMAKTdtd6PiGFZ8ja0BOIG1rxaghrVBcVoEMUtvS0z6b1LOKWmferCJaZtetJS86ac70rLbWm9V
                yTC8ijqa+x8IAHErDZIUX5V8ghXPjIV+9IB86+xcK/8A6lijyXSpTpoyewtxbA5t/KhzEG+mtSpFjehO
                bk1jruSNWa1gLa0BsoUDy5UZwtzmJ05UqzDN5VIFW9sEga0hxUhcI/wrQY39ayuNsBhN9M1bEavn7tmx
                sx/fNfTMWO57JcEjvr3aHT+En86+XobySMOpNfU+0f1fD+EQ/dhX5RrVIanlvyTwraVoxNWVhjtWjAwr
                JKEnUaqu1VQ0OVhrRqAgzvS16JKaWvSnq7zlVlsBzqFAt5VdbWr2LlJeY21toenOkpCHBykN1tT2IHhN
                gCfxrJxJIbMEJv8AG9QurbDEyvMbgW3qpJv4Q1/3d70s2JhLMO8KOD4s+hFVfGIhVJAdfYkvWOfIJ7dP
                Hwo+RnewsyggjQ7EeW9KYzu50UyZHYDwttmHS/WiNMXkYI0eY2IZ7gfOkZnkKMZLa+K1st/OuHmyNfu9
                Hhx+3qxcfCYdHB7vcNvWbHjGiNgSU3tzrZxEqTALL3Y/eU8vSsWYmI90yqUOo5iuBDd2qhqj6SJHNpLg
                7G1AlxJCsryXDaG4vepkhjkINshYmzbA+tLSxOinlfrsa1wNeWObv2WlZbELy1pKTUsKLMcpB2NLn2xf
                bX8K0DTZqahSP48u42paQ2BopN9TQZTvWuJ3c+T1DTWQgVrYKIGxbYjUnkKycMBnJYVs4ZsqfvHryrZ6
                LmPd2hhlyF2HtjTXl51qwRBi2bV2be9Z2DUIg+8361qRjwKWYDnf50tWkZGXvAHvmjGa3Jj9kVMzFxJ4
                rk7P06mqQLJF9a6DLbMV5XO1FwUeZo5JCzFQWYciRsP760BuFZloWXDSJH/ljw3JtmPSpOG7uM+MeyyH
                Npa519/nTMmWGYK5NokJy76729STWegM6Z3CzKTlAt7Vt71WhoVmoJY4YFLn6p7A5PbK6kH+970tLCfp
                WR0DHDe25a+Y/kN6s5H0lcRJ4QuvXMP7vURFFy4WKFbt4SS5O5LE+tPUty0uIVsO7n2UXu7Doo1oQaKe
                Zx30kzqllAFha+v5a0E4ozq4hKB3fMDlsGS/T++Ve4VKIIJZvG7AvnQDQ5rk/nUOqjuLDKHllZDmZbuE
                5Kv3fLWlOJOq58yiVsiZQmwuM34UHBN3ccUZaQCVSJCB7RvpWhhVmlnmdIgJTLfQ3Bt4QKyW1DcjFip8
                RPG0MeSNczb7AeyPLrQcLi2xDyLIHLXuFdsx1Fyb+n5VsjAmPBGMXsy3D2sTvc2+VKNw9WGSMkSKLefU
                W934UGR9w8b9MthZlnWaOJ5QUjzK+UF78t/h7q08GY2gCYqWXucpPeMTcsNNPK9YrwHDyBmUypGy/Vk+
                EqDflW/mLtHLk1kyRoq7C7bj3X9K1wT0sch8Z6JpmlcysXSFMq35l9B+t/KpWSNUdpb9yjFY1X2Tl1Ov
                qbn0pOSRwHVHJeU5ix020H/TQpMUk0IhUusTKbi27FvaPuF7edbLTiatoBDES8ndzOirkTYX1t/+NGbE
                94mJkv3ZLZWzbZdrfj8aTSUEStBbvI7hHOwvr8tr0qcQsgaKxyjVR97Tn771DpNWuKjCxs8aZnbPLKW0
                7w/aP57elYmIxd5mElncDYG4F608ZN42K2BN7W9q3TyvSkeDEZ8Yyk+Ky7i/P8hXLl/t049nUg8sTFY4
                Ym13a+/PXptRsEyiXvAxszIdNx5VqDC5MgXIVuM7Dpzt1q+BhR3kZvq2WMMEsDe5rHLI1bGDu0uHzNEj
                mQC1zmK7EHyrL4tAUnMvfqsT6qbX91dPDhAY86vmFtDl9v8ArV1wcDqUkiS7bCQ2vWHHz/FRKuX8f5aR
                7uNRJ0yliki/uNV8TiAISFLFtj5Vs4jCYHDyt3OHCyc7D2fdS+XwkMcy9L2v5Gtz8jXhZn4qm1qcDgwk
                GGbFY5JJJmOVYk9oedqcWNcbC0mFxDq4bWOYZG8qy2u7E5bMd6PgJguLWSYA5W9lhp6eVN/KX6kfg9/8
                rVlw+OlQoiB0UBfa301Pxq0fZ/GTue9McMZFr3zMB6V0+Bx+ClgiGIwyIebAaV0P+G4eaFWw7qq7qQ+Y
                enlVY8xl57Yc34/JgdXy+fsbLgXjk4XO+IZmPfd8QhPQiuj4Pw5sJEWxD5523tsPSt7E4SXDFO9UhXF1
                bk1LFbmqcl6bgzzyP6ss6gDTalWWn2GnlQWjGpoGyGQYAUBxpTsqWpVxvVjOUcb0lOLXp6SksQNDTfai
                zJze9IObGncRoTSMvOmHcyEWqjPUMaET8K2CEKzPvQXNXvQzzqtRBbnSsvOm3pSXn0qWZe4Sgk4zg15G
                Zfxr65wRQ0uLe+8hr5P2eTvOPYNR/wAS9fVOz5/2eRuZY71Gfkn/AJFsqwX2taE7b9KqW11NhVSRrWei
                QfdDKWvagstjrRxbugL7mgyPm0vYDap2rqvEHbAY77VjdoWC4Zff+Fa7Ea61gdp3thx1Csa2NDIO/biM
                KA7EDc19T7ZG2Kwkf3EP5D8q+Z8GTvMbhk+9Kg/6hX0ntgc3GFHIIT/1Gm+Te2z8Oa0YDWfhxtT8NqmN
                TYbpQJDV6DId6ISDIwpXN50abQGlL1Oo1fRlNFXUUAHSiKfDXrXFUmtY1nzIpvrY+tOy2IOtKuRak92m
                PVlYmESe0Rpt4b2rKxUACsEcAfd2+AO9b80aONHyt8qQmjhI+sV9TZtLiuLm4h8vR/H5te3OtN3TBBI6
                ZtGzaL60JsQI3JSR7DcB60sVg4CxVCzrbN4hZh6XrIxOHQNcK6hvCCot7rV52eKXp45ibKskkbopk7xR
                yOQkf61n4tY2JZZEzDlbKfhR3gaFC0MrX53W2alJzJELSxujZSdt6zAWMskqx2aJszMLm2+hNLSsjByC
                mVhfwXHuqHVks8YK5tiRvQ5zJkuyaMbkq1r+6tsSwXXZKzWsQBt13pR9LEn30eZ9SMppZjcVpZuRvUPl
                rzoEpuBRm00523oMu1Xj7Z5PVXD7kct61sOArjML2XNpWVhuvlWshJJIFtNPKtWwLXhUd93YHjCBb9Nf
                9a0oMsssQU/VZx/p76ycIVsHY3LDXyrRh3RE1I2F+tTv92mtk7JN32ZFIZWOUG+htt+NFkkLtIkIy5Dk
                UHe/WgRf5bJEVBK2DsPY2u1WwosAyeAagX3639aBPqEZgpIT3YN7kMbdOd6tiWMSomHUqWQ5gNB6D4UN
                WSOJxK5V86yaH7OXYedKzYvESuq/7sm5VeS3/ParoZ66xxLqHWKXOEA+zl39PKkYSJIzmXu2TxX2B529
                PypjHzCKJljBBkVSwvoOZ/voBQI5laNY2m3kHeMdF1bW/wAh5U2mGuFnmYssWVnTJGFFr72A6C34UXD8
                PIUGKM5lJWVGfxbf1ppcK8MTlZ80DzKshZtRl0X3a6+6tM4d5oJI4x3TlVXIv3tNCfT86TiTGxYsEjYe
                QjMcrjKbeL0FaWBwzxwo0rLluwUgWucxv871pDIkMgxHgEKZnCba2PhG+9xeqCaBXeMLlRWysp1a+/xF
                Ychrq6eI33Z+MyQSS72A7xb7FedV+hxsskajM0Nmtm8WU7EHyomLVpo1VkPeNmUG++lFhwbRY6GTXIcy
                N/CRe1ZPl0ALZsuAGIgWYDN3gaOQ2sT4SR+FAwWJGHjnhmY5YD32Yc7CzfPX310mRYsCpJBXe3rrp8/h
                XP4vDMcTHYEAscx+9fejjz02XLx7lOIsRLCpDZcgBsLAa3f3+G3vpX6SGw2LaW5kC3VlX0NTxOfNJ3a6
                KITIeR9o6/Aj50uk4MK6WFu9ceVv/wDmuly3cvx1azTBI51ZfqA1nsd9T+ZHwoK4ll0JyyS+J+iDa5+Z
                rOklZoHiMqgM+aRjuOh+XxoMJfFyE2VEYWsDoqDn+VDluYWnCGZjOEztIxyE62A0H5mmhEq5QMzsW5G4
                Y/aJ60CJVaCFlJRApCoN7na/TnRxKqxmUOLN9VGxNjl5lR6fjWT3dGDo1HZZIgMugBvYnxMfSrwNDHjQ
                JjmU5I2OXQ5rqfT7NQGWWJWY65zmy8vL8qGbSRvHJokqlwRunjNx8PwrLLDd0GV0kWKEGHsxzuihZFX7
                W9mFJ4rikEcRVmWfCS2KyA7DXQ9CLVz3GcY6Lh0d2MsXgcjp0P5dKSGJbEYibu0ySPfN9126H1/Gsf4g
                r/kV1beKxSyqbC6rquni/v8AGgYjEr9HTu2PeHUFdmHP/Ss/CQTDOt8qZcwRjfL5el6KuSLwyPljY3Zd
                2U0aCfzdTUSggqy6HUMa1cLhlys4jDW0KjXQ1iJKEcENmQG/S9dZwjiGCjVQRnmJGXWwItWeturU5Ax3
                X4fw/wCkOFw7O3PKw2NdbDNiuFwJOsQnwy/5ndm7x+eU7iuG4pxaXhGIMrxL3TkqJY/snzpvgHa0mcB2
                BVjoeRrXHj+C7ss+YzALvsHxPh/GIRGCQT7IQ8/wpfiPDXwiCTMHjbnaxHqPzrGxmUtDj+EmPD4k6mMj
                LFOf/a1MYHi2L4hw6SDGQSQ5JPZkOqkdPKrxfpuD8jjwcXN6arjehEaUw43oQGpq7y5WZND1pN1FaUi3
                vScigXpjqZZ8iixpDEDStKYCs/EbVW6wsfEDU1nzDWtOddTWdPzrTFmSb21oJ3ozbmhHetgiiqmrkUNq
                bEF+dKSnempCNaTmqWCf7IAHtFAfuhm+VfUuAQ//AA9TzJvXy/seP/i8jfdhc19W4LZeGxdKjLyS/wBp
                iSPWguhpy4IJJpdyOtZffUaNy7XVEB8zQHJpyUrZddQKVcLY2tSN7rNalya5rtY/1Da/YrpnUWrke2D6
                SDooFanUG99WZ2Tj7zj3DU64hPxruO0b5+Mt5Iv61yHYRM/abhwNrLJm18lNdRxps3GJvIKP+kU16me3
                sPyp6KkYKdjO1RVHG1BlogN6HLsaNy1IztYG9KZqYxB3pTNS3O+kCiIdDQjarL8q9e4C9LYg0ow3v4fP
                lTElrE0qzHW2p+NJrCnlqPeNRS+KUrdo3ysRlZX2YV4qzMbRL67V7u8SoJUovvJP5Vnm7NatuPQ7WxsV
                H3kd+7yFW2z6gj1rEx0IlLeNTIdzmOa/512EnDJJkMnfqjnwk93m/Gs3GcLspH+0MuxUqCB5r1rz+biy
                9C9Ph5sPN3GyoUzBCSRvr+VLGSNhldG05qNvlW5ieFRyOypNkb7OddPfasedWhJE6lCDbxXIrkTV0PZA
                siEhCrjYhhegFB3fhkuDsLAUw+HAGkIseYYfKknVr5Q7XO4IqsX92aP1JTqB6mlHW1+lPyqRcEkn0pR1
                G/xrQWhxE2SrC3mKDLsaMxsSDtQJNiK0x9scr2FF7db1pxi5zb3OnnWdgwCSCTvWhASZVza3NatiW1hl
                GVdQq2uT5Xp3DAu0zbXXw/lWej2iboy2p4PkLWNmZsq1Fr/k9pEVVW8Pdg3+dU8RU7AZCF/dpR2keR09
                kMwF78gabByqgPsjUH8/hQdslCppJG3fNZnu7OfaquCbvJIyoAVJFXJf2gNfzFLEfSWljOjYiXJ55Rqf
                lTeEQxYwvIzLEma4UXNiLDT0rQ9s3dXGnvXETmwLCSRyPDyFvgaZw0MRCIqlnhIZs2xuNVocEf0hjJKG
                KaXvzzD2vjTcbRF5SRYspA9Mtjr7vnTlrd7Eyv8ARg3hjVogqFRra9hpy5mjG8JVVliyuUk8POxtl/Gl
                cuZcgQR6ZmJ1/wBKbhCYjDYdsiMM+dt7rrca9LXpLMN2ji5g0uMhjsymHwIovlybi/TnXoF7whWORu9u
                Tcai1Z08meaRCCiKli40+1z9BR+8SPD4WQaoBlIU6nUn9Kwyd93VxidWjEkSEBSql7tGPLe/x0o5mjMQ
                Vzdyua+2gGp+dqz8SuXv3d/q0U+dkvy/vnQ5MRcKDct3ZYg7eL9BWYe2+z6n8SIpy6JdVBAHqBb/APIm
                gcQivDJIgXXNlQ7kAafOl2Zvok0hByswI/gubfgfjRu8Eatlct3arm1vck/6Uvjr2TtNlxHFxmxs+Ys+
                YWXralJpPo12R7sYyFsfLSt3tlho42w06+05W5HLS9c9ilDvZRYBbD3/AOtaiBcuWLtgy+CVoywYKAvr
                R8JeSVFNy0roNDyvr8qHIgJZ2C3BGa1BViihV9m1jRuWtW6ZFcRuf8oBpmC7EA2Hu0qO8+lCGQmw8TLf
                p+XM1jNiv9kmiP2gqg9BVlxAaGMDceEgdLWpNY3RYfE2iyhl7tEkdR1N9KG/EFjw4OZTYlMrDrZgf/yr
                Bzu6Kt7768+VHgwUuIsFQnXX1qXIOqz9toxyfSMY3enMxOXMOlv7+dEwsscSnOoZJL+LcCi4LgWLZ1N2
                iK/aO4rcw3Z9Zcz4s2lbVwns5vvD16Vijk1PPhj93Nz4jEYh1EPtg6MF1Pka0uG9mZcXZsY7onK3Kutw
                3D8PGiqkaeEWGlOxoIx4asxC4+T8ly6Ln/8Asnh+4fDwYspimQtFmbUHrl5i9cbwVsdFxGbC4nxT4dyC
                n3SDqK+l8T4bheL4YQY2MnKcySIcskZ6q3KudwfYRcLjTPFxOdm+zmjAPvsdaejSNPHzI9s5LjocVhRH
                iY1KyLkcHWub4FwHEy8XnjinAwa6qG5j0rS43w/GcKaCXKmIilLBmVSMhG1/X8qjhuInRmmiK53XKMu1
                QPxO+y694594t0WC4geEXws1nhYhWQ7Gujw+KjxMSd2SwHX2gOh/Wuf4PwESDv8AibF5D7Matoo/Wuhw
                uHgwsWTDoEXnbnRh97uf8jnxRwO7z0M21ozW1oJ51dxQ2pSUU2w3pabY1IzPZCUb1nYhdDWjNvSUwvWl
                ZY+IXesydd62cQg1rMxC2vV4sFnON6C29MPal29o10ENW9DbnRDQnpsQX50nNzp2S1qRm51LMtbsgLYn
                GN0ht8TX1Thwy4KMa+zXzDseumNbyVfnX1LC+GBByArPP6KUHJrk3FCa3Wiswt50IuLEVBv6nogv5DWh
                Na9FZstyDQHa5pm9wVW0F64jtc13ceYFdo5sBXC9q2vO4H/E2qwniaZz9nqZu0MDfcjkb/orc4iQ3FsV
                /Hasv9myg8Ymf7mGf52FaGJObiGJbrI340ZdFWJ2rNQWptAKTg5U7FWVURdudBk50cDTyoEltaFiRxHO
                kvfTeJNJXoi+kDa3KiLQktRRtptXsXCQ3FxQzRnGhoLbGicNWF99KOpFr3F6Wy67286MgIGrA/KiNRWL
                AZlKq3ItsazcZiFiLQ4pVEZ1BQk29KdckAhI/ebEe+9ZPE8DNIhbNGP3UYgf0rn5l10bur8cF7dWdjY4
                SQveiZd1caEehrn+IqwZleEOdCW9m3nam8b9IwRNs9m5uvtVmT4vNGplF0GxA299eVyPfZexhh102dLG
                17R91fkoax99KzyOw8cZt1rQmnWRbuist/bC/pvSU6gXKSj5g1mewn7s+ZvFqCG9aVkJFrj1pvEEMNWI
                PnSMhIv5VuabDISDKLm9Bk1JPWjMQQRQJNq0OurDLvuvhSM5X3+tO4fxSD1vWbCbSitLCjKya6Ai9a/V
                ie2ooMmUAaaCnzlllXW9mbbnWbgmLWI9q+XyF9K0IpAsCyBbWJ0PM6Cp1ajqmFmDPaxZTb+/dRZZC6xq
                rC7L8FG1/wAaUBJWYRmzZrAdPOjBCzIyhcuWwA8/7FB11J7iKiSYdVVrtmOvQdfhamSmbAykraSR8rkb
                WqixC7rItgPAbb708chBQiyZgVH3gB/ZqyilCI865VXIQupNsw2qUIXDPLIcsrNYga+En+/jXnh8QzMP
                GWv67V5Y48TKkQ3dgoa+igHU+mhqd91adQ1N2cswzEFmBPKnMAwhhs2VVUE23JbLQYlWTHRxst4pnsf4
                V1NDw1u7zOCHOa4v94HT5VmtrjjqIQ8kKQu1y6Zy3I3F7+7WrysI8NDGtyViUL/NqfWvYUOJREtj3UYT
                y9nl86Iqos0SM+nhSTyOXMalNdlqP7izOWw4IAdJPCdbZvET8BRiUlWRGA1RBtqLD8b0m5VJFV2vFEM1
                r6ML62+NQkb4YI8jK6o/dOba2B/0p/FY+Qez6uJ5ChYd06hrAahR+dZ/0ju0l3vKAvh1GjXb8hQYFkM0
                ni1Ve7uD1sBRmUNZPBobbezZtB76jPy0xYvEsOmPwEUcmXR/CBy0rMbgRUe0tztW0iq0Uaakhibcr6Ue
                VdSDoBqppYBlvf1Ycj8Xr7uWk4HJGbMotbr8qo3Z7PexCn1rqMd7Qb7LLY+tv9KDHoxINCA9Nx5fko61
                crH2Yk7180llOlaOF7MRbO5B+VdDCo+W1MRC1Jd0f/Rl9WRhOA4aHMCtwSGF+RrVw2Dhh1jQLfQ0ytrV
                a1Gil5cn1pRRRU01qqCjBadG28bbr/pVg1xrvVMulTSJxo2FHUilFI99GVtKEkzBYAHxW865fFYBMfxJ
                /wDD0KK2VZJLWH7x+HxrolcA0RWFAdd14ZuG9R47IgVdFGgq2egZxXs3SjVn6xcwqAaHmrymkz1WNLTb
                Ux1oU1spqT2oLLlG9JyjStCVQaSmArSos2cDWsrFc61sVYXrHxR3q8arPlpY7mmJNzSx3NdGL1CXjQ25
                1c0NjVMtQpLWNIznem5DSM+9SwXQdj1PdTNyMqrX0+NgIwOdq+ediIw+DRebYj8BX0n6OlrX5Vjm9lO+
                2ETvrpQiu+tGaG2x1oRQ3OtRtju8qJrnOnlVO7iv9q1XUMASCDc71KsxJuBpWbkj0z96ZFomJuOW2tfO
                +0rZsXbq5r6QbqpbnvvXzHjrZsYvW5rfjV9qxNXU/szQfSuIOfswKvxcUZTmnkbq5Pzr37Nky4bikn/l
                Lp7z+VVw3WqzfJ4+toQgG1ORilIKfjXSsVnTyNLy7GmSNKWmIsaSxZ2JtrSWlN4k6mkqrHyW76XHRlGh
                oEe1HXY17VxwpNBQm2NGl2NBt4aJwza9WDFfs3X1qjXocjnKQCR/y3FJdEGKs5DOltQt/PT51MxhyEZP
                NSu9/KsDFTLlPeWkXl3alT8ax8TxCSC7QNIq80cWJ961x8nPrpLu4vxd9jbnEVw2JV0l+qk3ZZVura7g
                VynF8Lh1lLQZLNuV61ebjEskZ72Jsr82Zst+tZ02L7zUxrIeqka+4Vw8vIZeF6PFxuHrZ8qg5tx1IXMD
                SEqJaykk7+daGIkQm4aVOt9RSU97AZrj0rHH/K3W5OVDbNYlaUcedOyGxY/ZNLSgEc71sWGQMm2/Q1Qi
                4t0o7qCCdxQWW3nVjZJAYWseV60cNrbKLm9hSD605grs3K1anZYJptLCSBcRofDvbr1pqUfVpETcuC2+
                u9II/hTre3xohkbv415gKovzof8AJjr2fwKh3dmv9Y5a3lT0C2VGuB4wnzv8KVweU5SGGxtf4Uw7WgVT
                pma9hQM9amldWUuFUD2R+P6miRjPPHuApA1O2n+tLReNTFZjpc2+NqZRyYpQG8Z8QJ5DUUbgGvnEkoAK
                63e48/8AWvSsseHRtmZmLfwX0/OgxuI+8ZPEsYAU+Z/0ovEReRRe9108xl/Wpf3aHkzcREAEA5ri3Jb/
                AI/lQ8REyQQKrEkutgRuCv6UIhhFGWFnSHfkLG351N5GkRtWtJt5X0/vyqH9VhsmcE2aSKcBRldkYcsh
                Nx+dEwklp2LR2dpA0iHqL/DTnS6kOCqkOXC35e1bf30J2khjmlXOsiLmDX15XB9KA3UuvYyyM+MjGIOa
                N2YED7t76e6vF2KSoJPCCkua29yP0+VAlZIgO78DDK4NrgAm4I+dRHKgjAuLBUAHly/Or88oHvukMYpl
                kU+JUzb7WJNvwpqN/pDpluC0eawN+d7/ADpTullbEyDPcAhQOhonCkbNAmYd6jBfVKxyNurUddlvYDDk
                wKGFyrEXPrTWOjEcQYi6g/KmMDAIoIApJzEk5t73o3HoikEYQ5W3Hp0q+LDQtjyopYU2XMUvoQP6GhRi
                1wRrVkjkxMzpChdlGZtdhREgnZ0jeJlc9Ty86xzyA23DlxZ55dFMYplNBT+F4BiplBUpe/i8W1K4rCT4
                N8uIjZASQp5NaowyMvGWfDnh/wAiqNqlT50It10NQHArQs5uJhTCMLUgkg60ZJB1oSJzSxobc6GsotVW
                fzoJlcNVxJoaWzAXqM461RqrU0H13q4lFt6R70VHejXWqjVorKKIjg1mpL50eKXXepZanripBpYSC+9X
                MgtvUMwi56FJICKA0u+tAkm31oCoK0jC5pKZharPKNaSxEo11q6glMW/nWRiXp3EyedZOIfU1eJMIDtv
                rQbi9Qza1Qtqa2JNckUNiK9m+FDZhVMQ5Doaz5zqaclbSkZjSYLu+xEPd8JwuIY+Eyua7lcfA2mcA1xX
                ACI+zWCTmczfOisTr0qHtpA7bshNG18rg386ox31rj1mdLWZqIvEJ00zm1S6PY9erpXPnQxcbE1hpxWY
                A31FFTiyf7wGj4j5CfdoTt9VJ0y18z4s18aOlq72biEMmHkytdyvWuA4gc2PPlTMdRh97u47BLk4FxGT
                rKB8I2P51XCgWFF7JgRdjsW/N5pD8EUfnQsKRYVOb5Xi77tGEWtTse1Jw2ppDWO5sRtqVlG9ME6UvId6
                JWbiANaS0p7E2PrSVh1p7lfSYwLUdRoaFENKKtrV7hchDkGhoR2NFkoT2onUINVMauviLE+thVquooQf
                ZbTy8mHVxqHIHIHLS+K4bAYyVVE/fLeIevWtOAC3lTXdrlGVAR5VDxieV482Q+3B4rhUIkAEerDk2QP8
                tawOIcPijkCrEMraqxOVgfdvX0zF4KLEI2UKTzRtj6g/pWBxDhMn0d5MOqCMCzIr3APkvKuHm4Ndhejw
                fkD0t88xOHjSQhpXA86SmwbNcxzq4/eOldHi45oVYMhZRuAMrL6VlSstvEG03tyrhf6t3a+VjywMFuzx
                EnkDekWRwdvga2ZXAFvC4PUUpOqvfKLNTxy3Q4h7ZrhgTdT8aA+5puQWPWlZANa1GxyNQXFGwrWYAbXG
                lBbUgVfBrmkF771qdWGR3ayqDlZjew09avFGb5iM1mN/xomEjzSxKw21I+FMd3lYKd7Zmpz1uvGuZPD9
                ldf7+FNm97qA1lGvuoE6EtKkegQMLX9o01CpjeHYBjYW52FZ776r1UwefM0kZ8SOtm91PIAGeVrLE31a
                355z+l6TwdvoswB3bW/xorgSx4YkHk36099z11u8GSNXVW0sdCOjD8qPiXClBnJbOgFx5X/ClZkX6Y7f
                fW5vz0s3yojXYEoCMgPLmBpSyZ443pHYd8ylgp2BPmT+VOMM0D5A1sodfMgbe7WkpVDIhDWjsyMR8/xo
                8DZuHlWAzpJv5X/p86ld2gA0Tsy4tHQZAmYkA38JA0phXAZ4pghbErnUnZyV1HvoOHbvGd3H1qhwgOz7
                2+FqDO2WXBMWbIoBU+V9vUUx1SnUKdv9hNs14rRkkaga71ERygiUk2sCR5c/neqyjMrFyCWz7aXHShJN
                3bWIOo089KdNqR/UyMJN2YrcHfw7/C1FX6riEcyyXJs2vWkEmX6sfbWO38Why/mKuZHxLhHXKIyDm3JF
                S1DdrNxJcPhlZReW17Hpeke0fF8TNgIXwyp3pHtA7G9qw4Zw0rZ2bLqu9bMCkxw57eFrHOvKpyzyx6Pu
                Pji9tq9msDG+FWQyESAZAGPxrpUjwcFs7J0FmtauPd1wPDp1YNGG8S6Gx6EVyHEeLS962Wc5zuF2FR/D
                8g3DzGG2+9wcU4dHhmWRmjyDUKw09NwRS8GKwfEo5hw9Xd1a2aQKVvyBsLrfrXwVeP48JlOJLD94A1rd
                nOOcdw2Pw0+BaVxHIGy2sGF7ke+tMfjgeWDzmTfTHw+GxU8yuhzE+JGFmB6Gs7E9m2ue7fITsjVoYY4j
                HcWklwsbl8SSyoRqpOuX8adOB7QWXuOFYqSJ92Sy5bdQa43Hk+a4dl2Lw8mB8gG+fzh8PK0cylHHI15J
                vOuoi7Of4/xdocRim4fjLZRFOt8xHL1rVH7KcV/9Vit5xGuw48k8vJzxMVDy4ZZvOoM4vvrXdj9lWM1C
                8Ug/9M0Nv2V4+5/+J4e/8Bp/x5fqkLhxNfnVGnFjrXcH9lnERtxLDfytQ2/ZXxMgkcQwnwamcb+qtXD9
                /rvXu/Gutdk37L+Jr/8AP4P35qGf2Y8X1tjcF8W/Sq+LK5NJx1o8eIA510X/AHacYUf+KwJPkzfpQcV+
                z/jGFwkuIafBsI0L5BIcxt00pOKzslcSLb1P0nfWsNMQTsG+FX7yRibJJ/Kaj4xq1GxA11oLzjrSgTEt
                th5j/wDbNeGFxrezhMQf/tmmY1BWkmABsaSnn31pp+F8UI/8Bif/AEzS7cC4xLpHw+c+6j4u5nVlTzed
                Z00lyda6CTspx478PkF/vOo/Ol17Fcflbw4RAfOdP1rQxSNhc6W1NVLb11H/AGB48B448In8WJWpXsBx
                ctZsRw1D54itAhS5MtQ3a167Y/s54l9viHDEP/mk/lXQdnv2RR4yCSTiXGVDD2Vwi5tPO9PTTfIpGpOU
                6mvvf/cvwpt+L4//ANJaBN+xXhCqx/xXiJI6RpU6Y3cbwsFeE4FFRm+qvTJtY/nW5xDCRcDjEMecwxpk
                DON7VziYqLEFijAm9Tre+pH3ea1DbQ2A0NWa2utqGwO+/mKSVHXd7YGhki+vvNSWuu9+tDvpQEB9XmNr
                62rm8UQ2Nauia21xc3Nq5qUH6Y/W9VrRM+9X0Lgdo+ww0sXaVv8AqUflQcMdrUbC+DsVgh1S/wAZTS+H
                5Vln2wdFpQmmUalIflTKVkk4hbTXegSminalpTvRSyc25pewo8u9A99EavpMY0oi7VVRpVwule7ckKTn
                QG2piQWpeTS9EVL760VNt6WJo8R0FEmdw5FNgC3hax9aTw9qdjO1DSewpmbJa5I87GsXFzxriAwP1pFv
                GxVj7+fvrpAoZfaUe6lMXh0xCFRklPRv1rLkxU6ujizB7Lh+ISqXtiEmysbB3F8vleuexkEGYgd2/Qf1
                ru8dwYNExjSxva3eBvleuQxmAdb+BrL0TUf0rzubjyPS9Xg5McjQ3PT4ZdbKQfI3FJTwnLoFt5afKtqa
                Irm0YX6VmzW1KxhvRrWrlH6t8h9sOdbHzpRlvfWtXExF9VGQfvN+dIyREXv8d62LHLv0kittt6awCiNg
                x9okWobIbm2tEhzAMb5STbNWg2Kd2rDIUUS2u17/AApp7JjCS17KPxpFvAEiANwmWmswkkZ7+G1JagJ3
                ClZZASNHa595NSJB30ZU65rDyubn8qDCMhjY/ZUn8f1p3BQJ9HIYgFLL86ndWt1UAjSUm2VfHrzvRsOW
                EUy/dva/XNr+VDdmXDFgt2AsPhamREEZ1B9pmB+Ro33XrwlGVJHSQmy3NzzG2lM5gkYHV3Nz6f1qsMWa
                NI9PEFZqEQZMXA1z3anUE735VKq1aCLiEX6JcbHTL+8fFS0TNJOqNpmRr9L2/paiYqVXj8GiqpIv1CW/
                WlIZA2LUaaEfhc1QUZ1ppnuIVJRozmRuebe3yrzy97hrghdQw8v7vSnE5MuKL/YlYEP0PL8KBPMcPMQR
                eM2uD0IsaZQunUwJc2dWNlY6fumozF1Ia4eM+EH8KQMltL5hcrfp0ognGcBtHFmv1/sUJqQk7Ji445hm
                PhNt+VEgneRFkzBQpYEdVrBnaQsGa5CsfhenIbxxWQ3BBDLyvT1Bl3b0ZCylAdm01rq+HYuCHh7YzEsB
                FEt/FfeuV7McNx3GZEi4dhJZJAfaK+H3mvrHBf2etNJB/jTp9Eg8Qw6NfvX6t5VPxV2G6c+TRovmD4jj
                XabEFMFDMsRPhihB+ddd2d/Y1xPHZZOKYpcHGfsqMz19m4bgsJw6ER4LDxRINgorRSZ7VocOWXeTq5tL
                2t8vx/7KeH8Fw0eIwxkxtiBJ3guy+dhyp0cBnwOHSX/D3RCNLL+VfRlmbbb0q3e5hZtbda2x4cT6mAeX
                zFcVLhWWSOKWJ0a6tlK2Ir6ZwPtC3FcAklk75R9at9j+lVxkceMw0mHxCho5FsfKuc7P8DnwPF5fpID4
                fujZ1Oj66VqAeSdszxvg0GO4uvEYMQ8GJLRmQILq+Rgcw6NbTzrWxnaFMKrNiDGo3tfWmvomHZQMpt60
                hJ2W4TLIZJYHdjqxaRjVDo6KXe4GH7acNlU5y6N5irf9sOHAtZyfdTC9k+DWP+yfFzU/9k+D3H+yAf8A
                MaTnl9hH+Sg7Y8OJHjYmqHthw4HRnt6U2eyvB+WEGvLMaG3ZXhFj/smv8RpfLJ+infepeLtZw15Qvi8R
                2tXSTSYZIFdAWd9QNqxML2c4ZhZ1miw4V0N1Ja4rReNZD3jMDbYg7VQ7Oyez6pmmjSPVfFvvXz/tHxZ8
                Rjjh8PIV7rxMRyrT7accw/CMBIytnnc5EQNdmY7Cvm/EsQcJAuHaS+LmOeZrgan7NZZe6JP++TGKxEok
                zLMQw6AUjxLiuK7qKOOV1dnAuDSkmDw+FyYjETxzIpGaMMAzeW9LwS4fifa7DLBGsOFiVp2QMCABoKlN
                dye3otXi2PxnerGcTL4V18VHwrzvwiaXv3uAd2NZXEMYjYmfKAxz6acqZweNxq8ImSEk4e9mXJt8qUL3
                ekxU03CoZWmcnqWofCsQ7TGJn9oaHNQOHAy9mnBDBopHUj30jw+dIcbC7OAoYXNwdKN9w/Ta7NLI0+Hk
                c94mq68qz8Jj5MLiCxN+RBp/jU8MWLgxkUkbqpyvkK2y+40hxjChJhJHqri+lD0wKlrTszKJDcRtseVI
                YjMWte0q6r+9VeGSCJWw3EY3WIjMM+ZPyq6GORjCrNYX7qQ8/K9qPezyn/H2HFiS5YnMsybqacwXF8bF
                MrYRrEbi9Z2LkTvF71nixI2YIbP+FLtjFvcjJOp1YahvnTHXjAb7b6zwHtJDjLQ41hh8XyY+y1bExlic
                q3h8Oh5V8cixkeIQpI1mTnmuR6W3FdNwPtkeHqmExuTHYJxdAZAGUdVYnT0NamezS6Z/PXTE4visLjMZ
                LhMXhpWvpmy6V8/492HmgY4ng0pK/wDDvY19lwy4LjGFfF8FxX0mFP8ANRV+tg/jT8xR4OHYCSFGWVZn
                0Vo5bp3jHkhHPyNP4fL2e/u/N30zFYKQw46JwRvca09hsXFPrHIL9OdfbuLdnOBcYQ4bEYaTC4tbhopj
                4lPrXzvtJ+yrF4Nnk4fI1xssn5N+tZ5cWR3rZUZfvu5yXMykIA0jDw+vKqvwjjOGjztDDi1Aue5azD3c
                6R+j8U4djlw+PglUBspzqdPfWxFj5ogGjkIttWZ35UAvTZ1nsJHjkjuuU5uXlWfBw3E47iz4fBwPI7Np
                YaepPSt/s7KcZ2i4ZCXJSbGR+G+ly4r6J24xF+0vFBHZY/pcwAUWFs1vyquTDLH0hNGi5fi0MWD4NDg4
                JO8TD93CXGzEXJPpeszD07xRQvDo2t4nxDXPotIwcq5s/Zhon4qbSk4aaSstxqu21LS86OTS0tEa3Jy0
                C4osx1pbN50TvqibUVRpQ0tairbLXu3DAlpSXY05Na1JzbGicqTrR4jS7b0SNgBvRJtHD09EAQNKzsMR
                T8VjRT9x2jiy3kA/mtS2IkyqTDiHSw/3i51+NqbS1jqL0OaNGuxWzfxWqU/Vpin3czxDijQgNMjRkiyy
                CMlWHrpXP4+dMQ3hkVz7rV1eNn7sOAWkA3III99clxGOBs0uHikRm1Ot1PuItXBz7+3d6f42vo1YeLRk
                cgZjroLis6eXNmHgB9RetDFKWJzqvqEAFITI9j4iyelcD71d/wBd2ViPE2g94FJurX9rL5WrUaNiNQ1t
                txSMyjUEj1OlXi2aLKSLv9qrxxmHxsLyW8K7/GiK8dhljVm5m9q8njIRFCDyvVi2aFMQJLHNmb7R6npR
                0chQWNkAGahgKpUHTKDlTrRkQMru18iaD95qv6o0jOAA90CdQDYU7hRkjIZiWZbDptWfC2WaMX8WQt/D
                T+HW6i+4G3nWaP1aYvc2QGKKo21qYWDNGWGt7nXfS1BDhbNfTIR/1GoPhw8hTdbIv4mkfuuahjJC2+07
                L5EAGs3FuFzWbVYmP9+6tEyBYJG2Mdz/AH8awOJMUmyNrmTfrcC9qDuMuiMkiSYfDljmfuyWsNfFrp7q
                UmZo8TnUhsz9762q02hkYaKscaf9It+NLSTC1yNVvperN7sVImJlE8U0e3iDJc7HmKWmkDjxezv6Xocg
                N7KfFbMv739aWWS7bn+lUFmsR2sotYq32utQJDJMAFLX2sLmhqwsPuk6jpXScA7Xx9n0X/DeH4czgeKe
                RczE/lWmOHye3VKhaHZrsH2g45CZcPgzFhydJZzkB8/OvoPZ/wDZCiIr8bx2ZvtQ4fb+auKP7YuO5QAs
                VvSo/wC+Ljth4YfXLWv8OB/+qfkt+huGYDC8OwiYbBRLHCgygCm0Ar83f98HH7WHc3/hqv8A3wcfto0Q
                /wCWrMcT7p1v7v0wlrURbWr8w/8AfB2ivpJGP+WqH9rvaM/79PhTDH9xr/b9Sra2lSDX5Vb9rPaQ2tig
                B5CqN+1XtIRb6YR7qN4fuSbv1YCdaJH66V+Sm/ah2jbT6e4qh/aZ2jO/EJbU/lh+5a7v2Eh5HejxbX2F
                fjNv2kdoj/8A3Ke/rVD+0XtB/wDUcR/NTM8D7j4r937TLlImYIzsuyDc0vLi5mClcJJGxFu7WxA87nc1
                +Mm/aF2gJ14lif5qGe3vHm34niv56zz+OWv7JXia+hv2hE4TDG5xbyr99V199LQYqWPvWbDzNc3VWdQP
                Tyr8aN2344wseI4kj/zKC3a/jBFjjsT/AOoaD4GtL1D8ne0v2D2mxXEGwszcNwSyS5fDFE4C36a18qk7
                M9qsQGTFrLllk76UJMCitt4RmGgFfEG7V8Wa98biP5zVG7TcTbfGT/8AqGhyN7FLN42+2Ynsnx92UDAT
                NFH7P+0DXz1bSufk7A9pGRpsRwVcTipHYsJcYuWJPsqPFr1r5f8A9ouJED/a57f+YaqeP8R//VT/APqG
                odLvcv43zd9Nk7CdoWPg7LYCM9FxYP8A763uw/YvivDZeJY3HcMw2GxEiiOGNMQracyNdOVfFP8AHuIc
                8VN/6hqv+O4//wDVTW/8w0dL2zME+77onZ3jbSKHwORL6t30ZIHpmqmJ7OccWZlgwiPHsrPLGpPuzV8M
                PGscb/7TNr/+4ag8Yxp/+Zm97mjWP7l/Hlve773wLs1xdMLxFMfh8MnfS5ow2JTbL6+VAHZfiZKo+Cwa
                LezSLiVYgdQt6+FHi+MN/wDaJf5zUHi2MN/9ol/nNLrXsPEvrfc8X2Z4vG5jwYglw4OYF5I019M1EwPZ
                niU3DZMPjVwqFWIjBxaAZeWgNfBjxTFH/fyn/nNe/wASxXOaT+Y0GpfxJ9322XsxxKZ41mh4b3amxdJo
                wbfHWon7J42GW2DGBePRg0ssasD8a+Jf4jibaTSfzGq/TsQf96/8xo677m8X3u+/JwPGzYUHEScNixKN
                dZfpS3PnWfJ2c4i0rPNi+FPc+JziFJPzr4icbOSPrH/mNV+lzf8AEb+apQTW2P4vvd9sxPZ7GI5+j8T4
                T3dt5JlVvkatDwjFIpOI4rwpm1zIca3dt08KkWr4h9JlvqzfzVBxEh+0fjVdS/iftvt+DhxXDJExmB7Q
                8Pi4kh8M5xRJRegN9R5EGu1h7V8KxvDn/wAXxeAwvFiv+fgZh3c/mVPsmvy0Z311vUd63WtMeX4/7Ucf
                7b9NydquCNAkWIxnDsSY9FfESyO3wzWq0Xb3hWGRl+k8ElS2zwk5fnX5i75iNajvGrd/MyTTI4gd36Kx
                /bbgEoYT4zDMrizJFCcp91cD2n4r2fxBJ4Skyyk+L7KW/G9fM+8bTWvZzrXPlyGXeu7T4m9lt4DF4jh0
                8eJw+JXvcO6yR9SQeVdie2eDx00mIxEhikkYyMrLmsx3+dfMxISanN8azVfWSfu+t8VxmGxnB+Gy4SRW
                iZ5LLe7ctW6E9KUgrnexuJ+k4TE8PaxliviYfMfbX8D7q6HDkaVz8nu5BrqfhplTpSsVFDVgxqIxpeUi
                rsRS8jb1QbnqVmbzpW4osp3pa4rTUr68m29EHs0NKKvs+de1cMGTakptjTsw0pKY+E0Tkm3qynSqtvUr
                RD3P4Q6CtCEi1ZmG5VoRHQUUM8tsttPfQpoEZfu+hIqUItvUS3Ye0beS0nueLqzMVhYzbLOb8hpesnF4
                eMqRi5jbp3envNbGJiTKbLr1NyaxMfC7C6HPY9bfnXNyH+Xbw5fW7JxkeHRiUhWxGnhJDfHWsfFxoVLW
                QDyUVo4jDS5iQMvlG1Z8mFYlhkYMNyTXByGT9avS4/jr3dj4qIMl1a351lywhbFufIkVuTxLGxDjK3md
                6QnW7Gwv53rDadNom/LIkRmICmw30sLedGjIWO0ILMft3OlNLCxIBAseXWqk6WJBJ1Obl8Ksd0uP3KrH
                qzD2b6nr76J7QVQx7sDT9auzK1r2IAsF5UMsSz6+Fd2P3qoWlAmsJGTiJZDbKFJ30tTaZiqXNtbn50rh
                7NaJDqxAvbbnemlkWSSR0Bylu7jv90UlZgMWUqsMKE+Jza3OomlNgB7MjFviR+VqrIubGOc3hQ5Aevn+
                NDmW4AX2jZQAdun4Uip66m++V8RKik925I353P6GsLichZr2s1mZfS+laBYDDoVtZ2ke/rf+/fWLjnMs
                0rlvCige6qxLPPLrU0zNJBh2JuCRm6k7A/Kk+I2ixDanIQL2+dWkfKmW+qKB67frQsb4mbNcDu/nWmtJ
                YLsYMoYQBD7SNoRzHWgO+bxNo40b9aMCHjIJsQvypeXSQMdiLHzq6d1HYkanUjW1AN/dTWQBG6309KWI
                sSKeNH21detRV7VGlVPyjeoqbaVOWiOqvpVq9l0rwFEdXqj1qcpr1uVG46vV4V61eAoigVbnXudeonQT
                U9a961FEXqkb9ajlU0ReFeAJIAG9eprALmdtNQKKcnRuGMJOwJWP5158LMi5mWwHnWkFIUaiwAtVJV+q
                Y391LssjkystlKsyncV4KxW4VrdbUTEgjESXFjfatvBzxHDx5ZNAoRlyaG24p6XyvLPWIhYGRsobK2Xr
                bSq1tcSxSrh+7WXMzLb/AC7eE1inWieCptL1TXhzr3Oi0oFTeoqaJN6oNra1dFU+01hXSdieMYDs7xnE
                4niXDcNxRGwzwxpMudY3b7duoqd76JbuYuOtTX0JO2/DlUqOBcO/9EVwmLZJcQ8iZVDktYfZoF+5GT9k
                vXuvWrlRfQ6V5Y2dsqjMegp7JqWkOCy+HNPArEZrE61MnBZo4pH76FsilrA9K3ZVw8+QtiLBUHhynTS1
                DfukgxF51d2jZVVUO5o03KcmW/bkOlT+FXyldG0Ydan3ijd0qVLa2qWFhVha5udKhrWOtLcbd0IuhNTy
                vVyLRDzNVFqNyXe21eykzYftJw6VDqsuo6jmPhXdKyd9IYhaMsco6CuI7Kw5se85GkKHX946CuvhNZ8m
                kD7p07tONhRlIpOJvhR0eudKojbUnM1jTLNelJtzrVEMrK16XoknPpQa0lfYhaw6URSLVq8Gjgm7NcT+
                l4j6PEmKwzFgmdj4JxZRcXOvMjY0fhfDMEvarB4DGzSSYaZ4ChSP/NWTIyhvECoKtqQSR517HyO7h+Nz
                01rUjNa1bWIThQmhEeMxrQm/eO2EQMummVe8Ia53uRbzpvjHB+GSdq24Vw7FYqN5OI/RMkmHGSJTIV0b
                vCWtpuBfyo+RPVxrb1K7Vq4nheEOCxU2Ax7YmXCqrzqYMi5SwXMjXJYZmUahTrS2Iw+Ej4fgpoMb32Kl
                z9/h+6K9xY2XxHRsw102o3CU4an4tqJ2b/2WHF8SOhw693D/AOc9wp9wDN6qKc7PRRnFNiZ1DQYRDO4O
                zWNlX3sVHoTT3Qkupspqr3N9dK08PhosTh5MfxPFyRJLKyhkj7x5H0LG1xoMwub8xpRsTwaDDzYgz40/
                QoUhbvkhuzmVA6qqkjlfcjQe6p+RGm5+ULbUX9aRxFrVr8XwYwbxmOXvoJ4xLFJlylluRqORBUj3VlRj
                DtOgxkssUBvmeKMSMNNLKWUHW3MU9zN2Lis1zYj4a1mYhJWB9nL5ivqXaiOPinagcCg4txAxNxMYVMNL
                hwIMMucoClpDfLewGVbjpXBNw/PwTF8Q7yxgxEMHd5fa7xZWvflbu9vPyrnyDL7urDJx+rlZ8He/nyC6
                Vmy4axKqh9d6+ldoeyuEwMnGoMPxY4vF8KYmZBh8iFO9WO4bMTmBdbi1hc2JtScvZTAvjMDw1OLseKYy
                CCWCEYU5A8sSusbvm8JJcAEBhsTa5A5c+LG6cOfK+bSYdrdKXkwwJCsxAvryua+i8LZY+xHaTD8P4rio
                maCHEY7BtgozFKqYhEQCbOWBBlDaKOY1rDwHBMHNwpuJ8Yxz4PBd8cPH3MHfyyuAGYBSyiyhluSw9oWv
                y58sQ8ugzcvbklj7xgI7LEvOh4iVM4VB4Bt+bGtTjMWHhxbxcPxEk+DAGSWSLumOgvdczWsbjc7VvdgM
                Bh8RgO1yYzErhIH4YpeVlLkAYzCkWA3JtYDmSNRvSP8AZuX6uTiU2VIwbtrfremC4imiUWCqd77Vvv2Y
                gbiOGGF4lJNgcVwvFcSgmkw/dvlhScsjIGIBLYdluGOhB12rHHC8nAMJxpprJNicRhTFl0TukhYG99b9
                9a1tMnO+hr7mZfUsGIiGY2LM17735Cg4uYpOFzWZSBfobVSbEgMMlvqQVS7fb18V/iaQmYTvkU3Da597
                ACgNzyTVpYhl+hxtsWRrZvWsbFSBvbsdPFTvEpDIkfdKWtGm3ypEYeZgwWJ3D6Wy+la4hvuwzydaL0sg
                DsxBuWIsfMV7EeNntrnDW/G1Hfh+LeZrQSXLFj4aMOFY6R7DDsoZzb52NW6LLe7IieznmNah7NHlG5F6
                3cF2S4piXQhUS+9zW/gexCYcA49+9fcLew+FJ1G7hMJFLOkjqp7pV9rlfpQWW403r6bNw8JAYocIShFv
                HZFriuJ8DxeDcnKHT903pfLTt8lrfZ7YgFWCG+g+NMDCTMP8iT+WhAtG32lPnVmQ9DJ3+qRFIdkPwqRD
                IR7Bt6UZOITBbBlP/LV14nONsv8ALVa/2k39y3cyfcPwrwik/wCGfhTB4lO32l/lqP8AEsSPti38NJP9
                g7hCCblG3wq/0bEEf5TfCif4piv+JYfw1H+KYqwHfH4UtOp63VOFxPOJvhVWw8+l0IHnV24liW9qZvhQ
                ZMVK/tSMaNa8np+2hopFtoLVTKfKpLE+0SapmF+dEHdOQ6614R+dRcHrVtLc7UbjerwjHOvFQCOlRced
                qsbHrajX3G9QyFtvRIJ2hYmM6kc6rYa6V4LrpQdT2J3H+nTXHsfCofGTMpBK2PlQcvlU5P7sapaf6+6h
                sxZmZvaJuaj5UUJ5H4GvZDbb5Ut1fIhb+te60URnUZT8KnJ+6bfw0fIj5Qam1Eyb+E/y17L+6b/wmjcf
                KHp7qmy63Jq2U/db+U17KfuP/LRuF/VXw+de8N+dqvkb7jW/hr3dt9xv5aWyW6nh5CvXXoavkf7j/wAp
                r2R/+G9v4TTn5UJW+2leVspBUkHyNWyvr9W/8pr2V7/5b/ymkRT3z3Jzvf8Aiq30iQaCST+aq5X0Hdvf
                +E1BSS+kb/ymntlofShmzMWNyeZNRcX20q+SQ7Rvcb+E1IilY27t/wCU0dE6LrYAb9a9pc1f6PNe3dS/
                yGi4fAzzPlMciL1KGlLXW5ckcjtUHQU83DJRsJW9ImqV4ViGI+oxBHlE36Vbxp7Z/M+t272cg7nhiufa
                mbP7hoK2Yq7zhXYPh78PwrYjFYuE90obIq5Rp504f2d4JgTDxqRf/Mw9/mKxzO7QwyTergUPwoqt0rtv
                +7eZjaHjWBY9HjdapJ+zzHwLmbiXCrXtdpmX8qxSowy/VyA9aXm512r/ALP+PL/lpg5emTFLrSknYDtJ
                c24ep9J0/WgEhxbiZBS9djP2D7TLf/4PMw/dZG/Okv8AsR2m/wDomN/lFXpp+L+r7J/2exsPCcRg0lws
                gmmimz5yLZFkFrefefLzr0mA4snFsJxGHDQd7hlw4VO/BuYkRQT65L++un/3Yof+7Ndhytn/ABlw3F+E
                znIcBwfGwblw+IScHpawW3Pe9PYSUYrtfwzHScKx2ExL8RinxM0jkxD6wFiAUGUX11Y2rrsP7MlMj2BV
                fyK0fAvlWKnCYPEQcP4PjMIcSFE7OXkuoIbKgyDKMwB1LHQa0nimgbh2Chj4bLh8VFn7/EMzHv7m6+E6
                LlGmm9fZ8P8AZquM9tfStTNpcC+UYjEwjh+BweHkzJGpllYgi8rbjXooUeoNt6dGJhj4KmGhe8s0neT6
                HQLoi/Nj7x0rtpf8s++snEey9Bk2bgSHBmhxPD3wuJjhlihk71M2MTDsCwAaxbRgcq3A10Fe4hxrCy43
                FRvAJsDLHAhSKQxlWijCBkYg6e1uDoetUb/Mb0omF9tfWhajEkJsXDi8dg3fCZsDhgqLhg5OaMMWKl97
                klrkDnoKRxuFE2JmkwuBnjiZ2ZIgrtkUnRbkXNhpevpPDPYjrSj9msnNtMcDV8pxeIxx7TPxrD8MxIl+
                mHGLGYmIBz5wCbC9J8S72bg0/DOGdnMdh45cTHiTI5aVyVWRcp8AFvrNNNLG976fXJKyZPaHr+lZZcjb
                Y4F80xeE47j8f2kxMXAMWv8AjOfwswHc5sQk259r2MvLe/lW/jez+PTH4HHYXhMK8Rw+CwiR4qTHhY1k
                TDxrmaMKSWVgQLMBdRcHW/an2ffSs3+S1ZZZuqjHV8z4Z+z7jGFwfFoJMTw3Lj8KuGzCZj3Vpopc1suv
                +Va2m9+Vi9wr9n8a8JPDOO4uHFYJJjiIjhrwyxOQFYhmDAhgq3BU+yLW59VN7aehoQ+36VG63Jua4f8A
                s17O4XtDHjMU+IxvDVuDgJJgC3gtrIpDe14tLdNq9wv9n/BeF4HimG+kY3E/T8MMNIxlAIAmjluLLveI
                D3munw3/AIhadw/tS/xVMGbYHD+zPBMO3DXGBZ1wOCm4eA0zszxSmYuL2FiRO4vrVsb2Z4FLwfBcNw3B
                EhwmEllmUGzljIEBY6DX6sai2ltNK6aLakp/aHoaSz+TclJ2WwZZu5weGj6fVqKU/wCyOHkYtJAJCNLA
                2/LWvoWE3HoK03/yKkJ/J1fKouxsZZ/9l1zZRYWVRyow7G+K/cp4dgDa/rXeL/4iT3fhSnGf/B//AHFq
                tas/k3Kp2RgX/crcbZf9Kn/s3AFIGHueut67jDf5fu/KsThXtY3/AMw/jV1asJ+CrCP8tU9NKRxHD1j0
                tbyrrm/3lYWJ5/31oKUuWxWDXWwPwrImwVyQFvXUYnZqzMRuKZK5ubAa6jWljw1WPijB91dLF7Rr2K9j
                3UVBc2vCYgReNAf4aKOER31RB7hWnhf8v/mNEj2b0qhl5Y7cPw6WBCXOmgBqj4TDrsikdQKM3sP61Ubi
                jfcmW+hQsb2A6eGpbAQN7K3P8FPjY/wmmYfZo3Fh/wCFoBqgv6VV+GKtiqi3pW2/t/8AMKC/P1pLFjjh
                +tlRfPSpHDdbFEBraj/zm9Kuv2f4qNz1ZmL4KkLqIZIpbrcleVDHDGFgypatmH2Wqp3PpRuPqy14cNQQ
                lEThgbktvStGH2W9aMvtCnuNWR/hQucoA/5akcMAuWCn3Vsx/rRk2qo1YH+Hp90VccPRh7Jv6VrDc1C7
                H0pRruzP8PS3s/KvJw5T/u1+FbH6UUeyaGdinhi29gfCqtw1fujXyFbb+x76SHsikxZx4eliSFvtqKt/
                h8ZGgW/pWnif8g+goTf5p/ho+5fUiMCttAPW1Uk4edSAPfWpyq67D305WCmAcCwykjrVxgJM2qG3lW0/
                +VUxfZ9aJ6skYHbwm1DxOHSFQCYlkc5Y1kbJnbpeuhbdqyeI/wDhv/upS3GoMPDXMStJCYnI1Um9veKr
                icC8ceaHDmdr6xhwptzIvXRQ/b/hqsm5pnkWBPwiOZVV4y1iGGtiD7qv/hx3CgVuL7A9aEfaFKqyhw1i
                KoeGlTqa1496YTb30U2PBhHFrXI9a0MLA9wMmvrTC70/gvZPrRWF6CCXTL3d/wB41rcN4VhY5++SGJJT
                qWFLxbUw3sr60lqMS6ODLGLNKgv1NO4KYyTth4FljZdSWjsh8wdjXyLtd/niuv7C/wCRh/Sp3P4l2PCO
                GzYTEzvJDhlWQ3+rmd7+4+zTUkeJ+lFoERogLd2Shv76LB/lx+gqMRu3rSgydkVe6ZVM8UWYcjsPlVcT
                JHBA80/0VIUF2Ys1lHWlH9mWtDBf58foaD2pllwmHxUKyRnClWW6t3jAMKQ/wF/+Phf/APLlp7Gf7731
                h06Pk3//2Q==
</property>
        </structure>
    </list-property>
</report>
